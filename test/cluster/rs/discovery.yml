description: "Replica set discovery"

uri: "mongodb://A/?replicaSet=rs"

phases: [

    # At first, A, B, and C are secondaries.
    {
        responses: [

                ["A:27017", {

                    ok: 1,
                    ismaster: false,
                    secondary: true,
                    setName: "rs",
                    hosts: ["A:27017", "B:27017", "C:27017"]
                }]
        ],

        outcome: {

            servers: {

                "A:27017": {

                    type: "RSSecondary",
                    setName: "rs"
                },

                "B:27017": {

                    type: "Unknown",
                    setName:
                },

                "C:27017": {

                    type: "Unknown",
                    setName:
                }
            },

            clusterType: "ReplicaSetNoPrimary",
            setName: "rs"
        }
    },

    # Admin removes A, adds a high-priority member D which becomes primary.
    {
        responses: [

                ["B:27017", {

                    ok: 1,
                    ismaster: false,
                    secondary: true,
                    setName: "rs",
                    primary: "D:27017",
                    hosts: ["B:27017", "C:27017", "D:27017"]
                }]
        ],

        outcome: {

            servers: {

                "A:27017": {

                    type: "RSSecondary",
                    setName: "rs"
                },

                "B:27017": {

                    type: "RSSecondary",
                    setName: "rs"
                },

                "C:27017": {

                    type: "Unknown",
                    setName:
                },

                "D:27017": {

                    type: "Unknown",
                    setName:
                }
            },

            clusterType: "ReplicaSetNoPrimary",
            setName: "rs"
        }
    },

    # Primary responds.
    {
        responses: [

                ["D:27017", {

                    ok: 1,
                    ismaster: true,
                    setName: "rs",
                    hosts: ["B:27017", "C:27017", "D:27017", "E:27017"]
                }]
        ],

        outcome: {

            # E is new.
            servers: {

                "B:27017": {

                    type: "RSSecondary",
                    setName: "rs"
                },

                "C:27017": {

                    type: "Unknown",
                    setName:
                },

                "D:27017": {

                    type: "RSPrimary",
                    setName: "rs"
                },

                "E:27017": {

                    type: "Unknown",
                    setName:
                }
            },

            clusterType: "ReplicaSetWithPrimary",
            setName: "rs"
        }
    },

    # Stale response from C.
    {
        responses: [

                ["C:27017", {

                    ok: 1,
                    ismaster: false,
                    secondary: true,
                    setName: "rs",
                    hosts: ["A:27017", "B:27017", "C:27017"]
                }]
        ],

        outcome: {

            # We don't add A back.
            # We don't remove E.
            servers: {

                "B:27017": {

                    type: "RSSecondary",
                    setName: "rs"
                },

                "C:27017": {

                    type: "RSSecondary",
                    setName: "rs"
                },

                "D:27017": {

                    type: "RSPrimary",
                    setName: "rs"
                },

                "E:27017": {

                    type: "Unknown",
                    setName:
                }
            },

            clusterType: "ReplicaSetWithPrimary",
            setName: "rs"
        }
    }
]
