{
  "description": "badQueries",
  "schemaVersion": "1.25",
  "runOnRequirements": [
    {
      "minServerVersion": "4.1.10",
      "csfle": {
        "minLibmongocryptVersion": "1.15.1"
      }
    }
  ],
  "createEntities": [
    {
      "client": {
        "id": "client0",
        "autoEncryptOpts": {
          "keyVaultNamespace": "keyvault.datakeys",
          "kmsProviders": {
            "aws": {
              "accessKeyId": {
                "$$placeholder": 1
              },
              "secretAccessKey": {
                "$$placeholder": 1
              }
            }
          }
        },
        "observeEvents": [
          "commandStartedEvent"
        ]
      }
    },
    {
      "database": {
        "id": "db",
        "client": "client0",
        "databaseName": "default"
      }
    },
    {
      "collection": {
        "id": "coll",
        "database": "db",
        "collectionName": "default"
      }
    },
    {
      "collection": {
        "id": "coll_with_encrypted_id",
        "database": "db",
        "collectionName": "coll_with_encrypted_id"
      }
    }
  ],
  "initialData": [
    {
      "databaseName": "default",
      "collectionName": "default",
      "documents": [
        {
          "_id": 1,
          "encrypted_string": {
            "$binary": {
              "base64": "AQAAAAAAAAAAAAAAAAAAAAACwj+3zkv2VM+aTfk60RqhXq6a/77WlLwu/BxXFkL7EppGsju/m8f0x5kBDD3EZTtGALGXlym5jnpZAoSIkswHoA==",
              "subType": "06"
            }
          }
        },
        {
          "_id": 2,
          "encrypted_string": {
            "$binary": {
              "base64": "AQAAAAAAAAAAAAAAAAAAAAACDdw4KFz3ZLquhsbt7RmDjD0N67n0uSXx7IGnQNCLeIKvot6s/ouI21Eo84IOtb6lhwUNPlSEBNY0/hbszWAKJg==",
              "subType": "06"
            }
          }
        }
      ],
      "createOptions": {
        "validator": {
          "$jsonSchema": {
            "properties": {
              "encrypted_w_altname": {
                "encrypt": {
                  "keyId": "/altname",
                  "bsonType": "string",
                  "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
                }
              },
              "encrypted_string": {
                "encrypt": {
                  "keyId": [
                    {
                      "$binary": {
                        "base64": "AAAAAAAAAAAAAAAAAAAAAA==",
                        "subType": "04"
                      }
                    }
                  ],
                  "bsonType": "string",
                  "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
                }
              },
              "random": {
                "encrypt": {
                  "keyId": [
                    {
                      "$binary": {
                        "base64": "AAAAAAAAAAAAAAAAAAAAAA==",
                        "subType": "04"
                      }
                    }
                  ],
                  "bsonType": "string",
                  "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
                }
              },
              "encrypted_string_equivalent": {
                "encrypt": {
                  "keyId": [
                    {
                      "$binary": {
                        "base64": "AAAAAAAAAAAAAAAAAAAAAA==",
                        "subType": "04"
                      }
                    }
                  ],
                  "bsonType": "string",
                  "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
                }
              }
            },
            "bsonType": "object"
          }
        }
      }
    },
    {
      "databaseName": "default",
      "collectionName": "coll_with_encrypted_id",
      "documents": [],
      "createOptions": {
        "validator": {
          "$jsonSchema": {
            "properties": {
              "_id": {
                "encrypt": {
                  "keyId": [
                    {
                      "$binary": {
                        "base64": "AAAAAAAAAAAAAAAAAAAAAA==",
                        "subType": "04"
                      }
                    }
                  ],
                  "bsonType": "string",
                  "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
                }
              }
            }
          }
        }
      }
    },
    {
      "databaseName": "keyvault",
      "collectionName": "datakeys",
      "documents": [
        {
          "status": 1,
          "_id": {
            "$binary": {
              "base64": "AAAAAAAAAAAAAAAAAAAAAA==",
              "subType": "04"
            }
          },
          "masterKey": {
            "provider": "aws",
            "key": "arn:aws:kms:us-east-1:579766882180:key/89fcc2c4-08b0-4bd9-9f25-e30687b580d0",
            "region": "us-east-1"
          },
          "updateDate": {
            "$date": {
              "$numberLong": "1552949630483"
            }
          },
          "keyMaterial": {
            "$binary": {
              "base64": "AQICAHhQNmWG2CzOm1dq3kWLM+iDUZhEqnhJwH9wZVpuZ94A8gEqnsxXlR51T5EbEVezUqqKAAAAwjCBvwYJKoZIhvcNAQcGoIGxMIGuAgEAMIGoBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDHa4jo6yp0Z18KgbUgIBEIB74sKxWtV8/YHje5lv5THTl0HIbhSwM6EqRlmBiFFatmEWaeMk4tO4xBX65eq670I5TWPSLMzpp8ncGHMmvHqRajNBnmFtbYxN3E3/WjxmdbOOe+OXpnGJPcGsftc7cB2shRfA4lICPnE26+oVNXT6p0Lo20nY5XC7jyCO",
              "subType": "00"
            }
          },
          "creationDate": {
            "$date": {
              "$numberLong": "1552949630483"
            }
          },
          "keyAltNames": [
            "altname",
            "another_altname"
          ]
        }
      ]
    }
  ],
  "tests": [
    {
      "description": "$text unconditionally fails",
      "operations": [
        {
          "name": "find",
          "arguments": {
            "filter": {
              "$text": {
                "$search": "search text"
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Unsupported match expression operator for encryption"
          }
        }
      ]
    },
    {
      "description": "$where unconditionally fails",
      "operations": [
        {
          "name": "find",
          "arguments": {
            "filter": {
              "$where": {
                "$code": "function() { return true }"
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Unsupported match expression operator for encryption"
          }
        }
      ]
    },
    {
      "description": "$bit operators succeed on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$bitsAllClear": 35
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$bitsAllClear": 35
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$bitsAllSet": 35
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$bitsAllSet": 35
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$bitsAnyClear": 35
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$bitsAnyClear": 35
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$bitsAnySet": 35
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$bitsAnySet": 35
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        }
      ]
    },
    {
      "description": "geo operators succeed on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$near": [
                  0,
                  0
                ]
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "unable to find index"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$near": [
                  0,
                  0
                ]
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$nearSphere": [
                  0,
                  0
                ]
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "unable to find index"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$nearSphere": [
                  0,
                  0
                ]
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$geoIntersects": {
                  "$geometry": {
                    "type": "Polygon",
                    "coordinates": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          1,
                          0
                        ],
                        [
                          1,
                          1
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$geoIntersects": {
                  "$geometry": {
                    "type": "Polygon",
                    "coordinates": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          1,
                          0
                        ],
                        [
                          1,
                          1
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$geoWithin": {
                  "$geometry": {
                    "type": "Polygon",
                    "coordinates": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          1,
                          0
                        ],
                        [
                          1,
                          1
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$geoWithin": {
                  "$geometry": {
                    "type": "Polygon",
                    "coordinates": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          1,
                          0
                        ],
                        [
                          1,
                          1
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  }
                }
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        }
      ]
    },
    {
      "description": "inequality operators succeed on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$gt": 1
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$gt": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$lt": 1
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$lt": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$gte": 1
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$gte": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$lte": 1
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$lte": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        }
      ]
    },
    {
      "description": "other misc operators succeed on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$mod": [
                  3,
                  1
                ]
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$mod": [
                  3,
                  1
                ]
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$regex": "pattern",
                "$options": ""
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$regex": "pattern",
                "$options": ""
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$size": 2
              }
            }
          },
          "object": "coll",
          "expectResult": []
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$size": 2
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Invalid match expression operator on encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$eq": null
              }
            }
          },
          "object": "coll",
          "expectResult": [
            {
              "_id": 1,
              "encrypted_string": "string0"
            },
            {
              "_id": 2,
              "encrypted_string": "string1"
            }
          ]
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$eq": null
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Illegal equality to null predicate for encrypted field"
          }
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "unencrypted": {
                "$in": [
                  null
                ]
              }
            }
          },
          "object": "coll",
          "expectResult": [
            {
              "_id": 1,
              "encrypted_string": "string0"
            },
            {
              "_id": 2,
              "encrypted_string": "string1"
            }
          ]
        },
        {
          "name": "find",
          "arguments": {
            "filter": {
              "encrypted_string": {
                "$in": [
                  null
                ]
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Illegal equality to null inside $in against an encrypted field"
          }
        }
      ]
    },
    {
      "description": "$addToSet succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$addToSet": {
                "unencrypted": [
                  "a"
                ]
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 1,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$addToSet": {
                "encrypted_string": [
                  "a"
                ]
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$addToSet not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "$inc succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$inc": {
                "unencrypted": 1
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 1,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$inc": {
                "encrypted_string": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$inc and $mul not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "$mul succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$mul": {
                "unencrypted": 1
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 1,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$mul": {
                "encrypted_string": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$inc and $mul not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "$max succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$max": {
                "unencrypted": 1
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 1,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$max": {
                "encrypted_string": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$max and $min not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "$min succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$min": {
                "unencrypted": 1
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 1,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$min": {
                "encrypted_string": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$max and $min not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "$currentDate succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$currentDate": {
                "unencrypted": true
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 1,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$currentDate": {
                "encrypted_string": true
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$currentDate not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "$pop succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$pop": {
                "unencrypted": 1
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 0,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$pop": {
                "encrypted_string": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$pop not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "$pull succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$pull": {
                "unencrypted": 1
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 0,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$pull": {
                "encrypted_string": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$pull not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "$pullAll succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$pullAll": {
                "unencrypted": [
                  1
                ]
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 0,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$pullAll": {
                "encrypted_string": [
                  1
                ]
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$pullAll not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "$push succeeds on unencrypted, error on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$push": {
                "unencrypted": 1
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 1,
            "modifiedCount": 1,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$push": {
                "encrypted_string": 1
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "$push not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "array filters on encrypted fields does not error in mongocryptd, but errors in mongod",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$set": {
                "encrypted_string.$[i].x": 1
              }
            },
            "arrayFilters": [
              {
                "i.x": 1
              }
            ]
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Array update operations not allowed on encrypted values"
          }
        }
      ]
    },
    {
      "description": "positional operator succeeds on unencrypted, errors on encrypted",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {
              "unencrypted": 1
            },
            "update": {
              "$set": {
                "unencrypted.$": 1
              }
            }
          },
          "object": "coll",
          "expectResult": {
            "matchedCount": 0,
            "modifiedCount": 0,
            "upsertedCount": 0
          }
        },
        {
          "name": "updateOne",
          "arguments": {
            "filter": {
              "encrypted_string": "abc"
            },
            "update": {
              "$set": {
                "encrypted_string.$": "abc"
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Cannot encrypt fields below '$' positional update operator"
          }
        }
      ]
    },
    {
      "description": "an update that would produce an array on an encrypted field errors",
      "operations": [
        {
          "name": "updateOne",
          "arguments": {
            "filter": {},
            "update": {
              "$set": {
                "encrypted_string": [
                  1,
                  2
                ]
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Cannot encrypt element of type"
          }
        }
      ]
    },
    {
      "description": "an insert with encrypted field on _id errors",
      "operations": [
        {
          "name": "insertOne",
          "arguments": {
            "document": {
              "_id": 1
            }
          },
          "object": "coll_with_encrypted_id",
          "expectError": {
            "errorContains": "Invalid schema containing the 'encrypt' keyword."
          }
        }
      ]
    },
    {
      "description": "an insert with an array value for an encrypted field fails",
      "operations": [
        {
          "name": "insertOne",
          "arguments": {
            "document": {
              "encrypted_string": [
                "123",
                "456"
              ]
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "Cannot encrypt element of type"
          }
        }
      ]
    },
    {
      "description": "an insert with a Timestamp(0,0) value in the top-level fails",
      "operations": [
        {
          "name": "insertOne",
          "arguments": {
            "document": {
              "random": {
                "$timestamp": {
                  "t": 0,
                  "i": 0
                }
              }
            }
          },
          "object": "coll",
          "expectError": {
            "errorContains": "A command that inserts cannot supply Timestamp(0, 0) for an encrypted"
          }
        }
      ]
    },
    {
      "description": "distinct with the key referring to a field where the keyID is a JSON Pointer errors",
      "operations": [
        {
          "name": "distinct",
          "arguments": {
            "filter": {},
            "fieldName": "encrypted_w_altname"
          },
          "object": "coll",
          "expectError": {
            "errorContains": "The distinct key is not allowed to be marked for encryption with a non-UUID keyId"
          }
        }
      ]
    }
  ]
}
