########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourselves against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 3600 # 60 minutes is the longest we'll ever run (primarily
                        # for macos hosts)

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the subitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen expansion file with dynamic values
    - command: subprocess.exec
      params:
        include_expansions_in_env: ["is_patch", "project", "version_id"]
        binary: bash
        working_dir: "src"
        args:
          - .evergreen/scripts/configure-env.sh
    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "prepare resources":
    - command: shell.exec
      params:
        script: |
          . src/.evergreen/scripts/env.sh
          set -o xtrace
          rm -rf $DRIVERS_TOOLS
          if [ "$PROJECT" = "drivers-tools" ]; then
            # If this was a patch build, doing a fresh clone would not actually test the patch
            cp -R ${PROJECT_DIRECTORY}/ ${DRIVERS_TOOLS}
          else
            git clone https://github.com/mongodb-labs/drivers-evergreen-tools.git ${DRIVERS_TOOLS}
          fi
          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config

  "upload coverage" :
    - command: ec2.assume_role
      params:
        role_arn: ${assume_role_arn}
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_file:  src/.coverage
        optional: true
        # Upload the coverage report for all tasks in a single build to the same directory.
        remote_file: coverage/${revision}/${version_id}/coverage/coverage.${build_variant}.${task_name}
        bucket: ${bucket_name}
        permissions: public-read
        content_type: text/html
        display_name: "Raw Coverage Report"

  "download and merge coverage" :
    - command: ec2.assume_role
      params:
        role_arn: ${assume_role_arn}
    - command: shell.exec
      params:
        silent: true
        working_dir: "src"
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        script: |
          # Download all the task coverage files.
          aws s3 cp --recursive s3://${bucket_name}/coverage/${revision}/${version_id}/coverage/ coverage/
    - command: subprocess.exec
      params:
        working_dir: "src"
        binary: bash
        args:
          - .evergreen/combine-coverage.sh
    # Upload the resulting html coverage report.
    - command: shell.exec
      params:
        silent: true
        working_dir: "src"
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        script: |
           aws s3 cp htmlcov/ s3://${bucket_name}/coverage/${revision}/${version_id}/htmlcov/ --recursive --acl public-read --region us-east-1
    # Attach the index.html with s3.put so it shows up in the Evergreen UI.
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_file:  src/htmlcov/index.html
        remote_file: coverage/${revision}/${version_id}/htmlcov/index.html
        bucket: ${bucket_name}
        permissions: public-read
        content_type: text/html
        display_name: "Coverage Report HTML"


  "upload mo artifacts":
    - command: ec2.assume_role
      params:
        role_arn: ${assume_role_arn}
    - command: shell.exec
      params:
        script: |
          . src/.evergreen/scripts/env.sh
          set -o xtrace
          mkdir out_dir
          find $MONGO_ORCHESTRATION_HOME -name \*.log -exec sh -c 'x="{}"; mv $x $PWD/out_dir/$(basename $(dirname $x))_$(basename $x)' \;
          tar zcvf mongodb-logs.tar.gz -C out_dir/ .
          rm -rf out_dir
    - command: archive.targz_pack
      params:
        target: "mongo-coredumps.tgz"
        source_dir: "./"
        include:
          - "./**.core"
          - "./**.mdmp" # Windows: minidumps
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_file: mongo-coredumps.tgz
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/coredumps/${task_id}-${execution}-mongodb-coredumps.tar.gz
        bucket: ${bucket_name}
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Core Dumps - Execution
        optional: true
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_file: mongodb-logs.tar.gz
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: ${bucket_name}
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_file: drivers-tools/.evergreen/orchestration/server.log
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-orchestration.log
        bucket: ${bucket_name}
        permissions: public-read
        content_type: ${content_type|text/plain}
        display_name: "orchestration.log"

  "upload working dir":
    - command: ec2.assume_role
      params:
        role_arn: ${assume_role_arn}
    - command: archive.targz_pack
      params:
        target: "working-dir.tar.gz"
        source_dir: ${PROJECT_DIRECTORY}/
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_file: working-dir.tar.gz
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
        bucket: ${bucket_name}
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "working-dir.tar.gz"
    - command: archive.targz_pack
      params:
        target: "drivers-dir.tar.gz"
        source_dir: ${DRIVERS_TOOLS}
        include:
          - "./**"
        exclude_files:
          # Windows cannot read the mongod *.lock files because they are locked.
          - "*.lock"
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_file: drivers-dir.tar.gz
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-drivers-dir.tar.gz
        bucket: ${bucket_name}
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "drivers-dir.tar.gz"

  "upload test results":
    - command: attach.results
      params:
        file_location: "${DRIVERS_TOOLS}/results.json"
    - command: attach.xunit_results
      params:
        file: "src/xunit-results/TEST-*.xml"

  "bootstrap mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          . src/.evergreen/scripts/env.sh
          set -o xtrace

          # Enable core dumps if enabled on the machine
          # Copied from https://github.com/mongodb/mongo/blob/master/etc/evergreen.yml
          if [ -f /proc/self/coredump_filter ]; then
            # Set the shell process (and its children processes) to dump ELF headers (bit 4),
            # anonymous shared mappings (bit 1), and anonymous private mappings (bit 0).
            echo 0x13 > /proc/self/coredump_filter

            if [ -f /sbin/sysctl ]; then
              # Check that the core pattern is set explicitly on our distro image instead
              # of being the OS's default value. This ensures that coredump names are consistent
              # across distros and can be picked up by Evergreen.
              core_pattern=$(/sbin/sysctl -n "kernel.core_pattern")
              if [ "$core_pattern" = "dump_%e.%p.core" ]; then
                echo "Enabling coredumps"
                ulimit -c unlimited
              fi
            fi
          fi

          if [ $(uname -s) = "Darwin" ]; then
              core_pattern_mac=$(/usr/sbin/sysctl -n "kern.corefile")
              if [ "$core_pattern_mac" = "dump_%N.%P.core" ]; then
                echo "Enabling coredumps"
                ulimit -c unlimited
              fi
          fi

          if [ -n "${skip_crypt_shared}" ]; then
            export SKIP_CRYPT_SHARED=1
          fi

          MONGODB_VERSION=${VERSION} \
            TOPOLOGY=${TOPOLOGY} \
            AUTH=${AUTH} \
            SSL=${SSL} \
            STORAGE_ENGINE=${STORAGE_ENGINE} \
            DISABLE_TEST_COMMANDS=${DISABLE_TEST_COMMANDS} \
            ORCHESTRATION_FILE=${ORCHESTRATION_FILE} \
            REQUIRE_API_VERSION=${REQUIRE_API_VERSION} \
            LOAD_BALANCER=${LOAD_BALANCER} \
            bash ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml
    - command: expansions.update
      params:
        updates:
          - key: MONGODB_STARTED
            value: "1"

  "bootstrap data lake":
    - command: shell.exec
      type: setup
      params:
        script: |
          . src/.evergreen/scripts/env.sh
          bash ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/pull-mongohouse-image.sh
    - command: shell.exec
      type: setup
      params:
        script: |
          . src/.evergreen/scripts/env.sh
          bash ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/run-mongohouse-image.sh
          sleep 1
          docker ps

  "stop mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          . src/.evergreen/scripts/env.sh
          set -o xtrace
          bash ${DRIVERS_TOOLS}/.evergreen/stop-orchestration.sh

  "run mod_wsgi tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          . .evergreen/scripts/env.sh
          set -o xtrace
          PYTHON_BINARY=${PYTHON_BINARY} MOD_WSGI_VERSION=${MOD_WSGI_VERSION} \
            MOD_WSGI_EMBEDDED=${MOD_WSGI_EMBEDDED} PROJECT_DIRECTORY=${PROJECT_DIRECTORY} \
            bash ${PROJECT_DIRECTORY}/.evergreen/run-mod-wsgi-tests.sh

  "run mockupdb tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          . .evergreen/scripts/env.sh
          set -o xtrace
          export PYTHON_BINARY=${PYTHON_BINARY}
          bash ${PROJECT_DIRECTORY}/.evergreen/hatch.sh test:test-mockupdb

  "run doctests":
     - command: shell.exec
       type: test
       params:
         working_dir: "src"
         script: |
           . .evergreen/scripts/env.sh
           set -o xtrace
           PYTHON_BINARY=${PYTHON_BINARY} bash ${PROJECT_DIRECTORY}/.evergreen/hatch.sh doctest:test

  "run tests":
    - command: shell.exec
      params:
        working_dir: "src"
        shell: bash
        background: true
        include_expansions_in_env:  ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        script: |
          . .evergreen/scripts/env.sh
          if [ -n "${test_encryption}" ]; then
            ./.evergreen/hatch.sh encryption:setup
          fi
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        shell: bash
        script: |
          # Disable xtrace
          set +x
          . .evergreen/scripts/env.sh
          if [ -n "${MONGODB_STARTED}" ]; then
            export PYMONGO_MUST_CONNECT=true
          fi
          if [ -n "${DISABLE_TEST_COMMANDS}" ]; then
            export PYMONGO_DISABLE_TEST_COMMANDS=1
          fi
          if [ -n "${test_encryption}" ]; then
            # Disable xtrace (just in case it was accidentally set).
            set +x
            bash ${DRIVERS_TOOLS}/.evergreen/csfle/await-servers.sh
            export TEST_ENCRYPTION=1
            if [ -n "${test_encryption_pyopenssl}" ]; then
              export TEST_ENCRYPTION_PYOPENSSL=1
            fi
          fi
          if [ -n "${test_crypt_shared}" ]; then
            export TEST_CRYPT_SHARED=1
            export CRYPT_SHARED_LIB_PATH=${CRYPT_SHARED_LIB_PATH}
          fi
          if [ -n "${test_pyopenssl}" ]; then
            export TEST_PYOPENSSL=1
          fi
          if [ -n "${SETDEFAULTENCODING}" ]; then
            export SETDEFAULTENCODING="${SETDEFAULTENCODING}"
          fi
          if [ -n "${test_loadbalancer}" ]; then
            export TEST_LOADBALANCER=1
            export SINGLE_MONGOS_LB_URI="${SINGLE_MONGOS_LB_URI}"
            export MULTI_MONGOS_LB_URI="${MULTI_MONGOS_LB_URI}"
          fi
          if [ -n "${test_serverless}" ]; then
            export TEST_SERVERLESS=1
          fi
          if [ -n "${TEST_INDEX_MANAGEMENT}" ]; then
            export TEST_INDEX_MANAGEMENT=1
          fi
          if [ -n "${SKIP_CSOT_TESTS}" ]; then
            export SKIP_CSOT_TESTS=1
          fi

          GREEN_FRAMEWORK=${GREEN_FRAMEWORK} \
            PYTHON_BINARY=${PYTHON_BINARY} \
            NO_EXT=${NO_EXT} \
            COVERAGE=${COVERAGE} \
            COMPRESSORS=${COMPRESSORS} \
            AUTH=${AUTH} \
            SSL=${SSL} \
            TEST_DATA_LAKE=${TEST_DATA_LAKE} \
            TEST_SUITES=${TEST_SUITES} \
            MONGODB_API_VERSION=${MONGODB_API_VERSION} \
            SKIP_HATCH=${SKIP_HATCH} \
            bash ${PROJECT_DIRECTORY}/.evergreen/hatch.sh test:test-eg

  "run enterprise auth tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        include_expansions_in_env: ["DRIVERS_TOOLS", "AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        script: |
          # Disable xtrace for security reasons (just in case it was accidentally set).
          set +x
          bash ${DRIVERS_TOOLS}/.evergreen/auth_aws/setup_secrets.sh drivers/enterprise_auth
          PROJECT_DIRECTORY="${PROJECT_DIRECTORY}" \
            PYTHON_BINARY="${PYTHON_BINARY}" \
            TEST_ENTERPRISE_AUTH=1 \
            AUTH=auth \
            bash ${PROJECT_DIRECTORY}/.evergreen/hatch.sh test:test-eg

  "run atlas tests":
    - command: shell.exec
      type: test
      params:
        include_expansions_in_env: ["DRIVERS_TOOLS", "AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        working_dir: "src"
        script: |
          # Disable xtrace for security reasons (just in case it was accidentally set).
          set +x
          set -o errexit
          bash ${DRIVERS_TOOLS}/.evergreen/auth_aws/setup_secrets.sh drivers/atlas_connect
          PROJECT_DIRECTORY="${PROJECT_DIRECTORY}" \
            PYTHON_BINARY="${PYTHON_BINARY}" \
            TEST_ATLAS=1 \
            bash ${PROJECT_DIRECTORY}/.evergreen/hatch.sh test:test-eg

  "get aws auth secrets":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        binary: bash
        args:
          - ${DRIVERS_TOOLS}/.evergreen/auth_aws/setup-secrets.sh

  "run aws auth test with regular aws credentials":
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: "src"
        script: |
          . .evergreen/scripts/env.sh
          .evergreen/run-mongodb-aws-test.sh regular

  "run aws auth test with assume role credentials":
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: "src"
        script: |
          . .evergreen/scripts/env.sh
          .evergreen/run-mongodb-aws-test.sh assume-role

  "run aws auth test with aws EC2 credentials":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        shell: "bash"
        script: |
          if [ "${skip_EC2_auth_test}" = "true" ]; then
             echo "This platform does not support the EC2 auth test, skipping..."
             exit 0
          fi
          . .evergreen/scripts/env.sh
          .evergreen/run-mongodb-aws-test.sh ec2

  "run aws auth test with aws web identity credentials":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        shell: "bash"
        script: |
          if [ "${skip_EC2_auth_test}" = "true" ]; then
             echo "This platform does not support the web identity auth test, skipping..."
             exit 0
          fi
          . .evergreen/scripts/env.sh
          # Test with and without AWS_ROLE_SESSION_NAME set.
          .evergreen/run-mongodb-aws-test.sh web-identity
          AWS_ROLE_SESSION_NAME="test" \
            .evergreen/run-mongodb-aws-test.sh web-identity

  "run oidc auth test with test credentials":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        binary: bash
        include_expansions_in_env: ["DRIVERS_TOOLS", "AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        args:
          - .evergreen/run-mongodb-oidc-test.sh

  "run aws auth test with aws credentials as environment variables":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        shell: bash
        script: |
          . .evergreen/scripts/env.sh
          .evergreen/run-mongodb-aws-test.sh env-creds

  "run aws auth test with aws credentials and session token as environment variables":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        shell: bash
        script: |
          . .evergreen/scripts/env.sh
          .evergreen/run-mongodb-aws-test.sh session-creds

  "run aws ECS auth test":
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: "src"
        script: |
          if [ "${skip_ECS_auth_test}" = "true" ]; then
             echo "This platform does not support the ECS auth test, skipping..."
             exit 0
          fi
          . .evergreen/scripts/env.sh
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          . aws_setup.sh ecs
          export MONGODB_BINARIES="$MONGODB_BINARIES";
          export PROJECT_DIRECTORY="${PROJECT_DIRECTORY}";
          python aws_tester.py ecs
          cd -

  "cleanup":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          . .evergreen/scripts/env.sh
          if [ -f $DRIVERS_TOOLS/.evergreen/csfle/secrets-export.sh ]; then
            . .evergreen/hatch.sh encryption:teardown
          fi
          rm -rf ${DRIVERS_TOOLS} || true
          rm -f ./secrets-export.sh || true

  "fix absolute paths":
    - command: shell.exec
      params:
        script: |
          set +x
          . src/.evergreen/scripts/env.sh
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  "windows fix":
    - command: shell.exec
      params:
        script: |
          set +x
          . src/.evergreen/scripts/env.sh
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            cat $i | tr -d '\r' > $i.new
            mv $i.new $i
          done
          # Copy client certificate because symlinks do not work on Windows.
          cp ${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem $MONGO_ORCHESTRATION_HOME/lib/client.pem

  "make files executable":
    - command: shell.exec
      params:
        script: |
          set +x
          . src/.evergreen/scripts/env.sh
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done

  "init test-results":
    - command: shell.exec
      params:
        script: |
          set +x
          . src/.evergreen/scripts/env.sh
          echo '{"results": [{ "status": "FAIL", "test_file": "Build", "log_raw": "No test-results.json found was created"  } ]}' > ${PROJECT_DIRECTORY}/test-results.json

  "install dependencies":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          . .evergreen/scripts/env.sh
          set -o xtrace
          file="${PROJECT_DIRECTORY}/.evergreen/install-dependencies.sh"
          # Don't use ${file} syntax here because evergreen treats it as an empty expansion.
          [ -f "$file" ] && bash $file || echo "$file not available, skipping"

  "assume ec2 role":
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}

  "setup atlas":
    - command: subprocess.exec
      params:
        binary: bash
        include_expansions_in_env: ["task_id", "execution"]
        env:
          MONGODB_VERSION: "7.0"
          LAMBDA_STACK_NAME: dbx-python-lambda
        args:
          - ${DRIVERS_TOOLS}/.evergreen/atlas/setup-atlas-cluster.sh
    - command: expansions.update
      params:
        file: atlas-expansion.yml

  "run-ocsp-test":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          . .evergreen/scripts/env.sh
          TEST_OCSP=1 \
          PYTHON_BINARY=${PYTHON_BINARY} \
          CA_FILE="${DRIVERS_TOOLS}/.evergreen/ocsp/${OCSP_ALGORITHM}/ca.pem" \
          OCSP_TLS_SHOULD_SUCCEED="${OCSP_TLS_SHOULD_SUCCEED}" \
          bash ${PROJECT_DIRECTORY}/.evergreen/hatch.sh test:test-eg
          bash ${DRIVERS_TOOLS}/.evergreen/ocsp/teardown.sh

  "run-ocsp-server":
    - command: subprocess.exec
      params:
        background: true
        binary: bash
        include_expansions_in_env: [SERVER_TYPE, OCSP_ALGORITHM]
        args:
          - ${DRIVERS_TOOLS}/.evergreen/ocsp/setup.sh

  "run load-balancer":
    - command: shell.exec
      params:
        script: |
          DRIVERS_TOOLS=${DRIVERS_TOOLS} MONGODB_URI=${MONGODB_URI} bash ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh start
    - command: expansions.update
      params:
        file: lb-expansion.yml

  "stop load-balancer":
    - command: shell.exec
      params:
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen
          DRIVERS_TOOLS=${DRIVERS_TOOLS} bash ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh stop

  "teardown_docker":
    - command: shell.exec
      params:
        script: |
          # Remove all Docker images
          DOCKER=$(command -v docker) || true
          if [ -n "$DOCKER" ]; then
            docker rmi -f $(docker images -a -q) &> /dev/null || true
          fi

  "teardown_aws":
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          . src/.evergreen/scripts/env.sh
          cd "${DRIVERS_TOOLS}/.evergreen/auth_aws"
          if [ -f "./aws_e2e_setup.json" ]; then
            . ./activate-authawsvenv.sh
            python ./lib/aws_assign_instance_profile.py
          fi

  "teardown atlas":
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - ${DRIVERS_TOOLS}/.evergreen/atlas/teardown-atlas-cluster.sh

  "run perf tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          . .evergreen/scripts/env.sh
          PROJECT_DIRECTORY=${PROJECT_DIRECTORY} bash ${PROJECT_DIRECTORY}/.evergreen/run-perf-tests.sh

  "attach benchmark test results":
    - command: attach.results
      params:
        file_location: src/report.json

  "send dashboard data":
    - command: perf.send
      params:
        file: src/results.json

pre:
  - func: "fetch source"
  - func: "prepare resources"
  - func: "windows fix"
  - func: "fix absolute paths"
  - func: "init test-results"
  - func: "make files executable"
  - func: "install dependencies"
  - func: "assume ec2 role"

post:
  # Disabled, causing timeouts
  # - func: "upload working dir"
  - func: "upload coverage"
  - func: "upload mo artifacts"
  - func: "upload test results"
  - func: "stop mongo-orchestration"
  - func: "teardown_aws"
  - func: "cleanup"
  - func: "teardown_docker"

task_groups:
  - name: serverless_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: "fetch source"
      - func: "prepare resources"
      - command: subprocess.exec
        params:
          binary: bash
          env:
            VAULT_NAME: ${VAULT_NAME}
          args:
            - ${DRIVERS_TOOLS}/.evergreen/serverless/create-instance.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/serverless/delete-instance.sh
      - func: "upload test results"
    tasks:
      - ".serverless"

  - name: testgcpkms_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: fetch source
      - func: prepare resources
      - func: fix absolute paths
      - func: make files executable
      - command: subprocess.exec
        params:
          binary: "bash"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/create-and-setup-instance.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: "bash"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/delete-instance.sh
      - func: "upload test results"
    tasks:
      - testgcpkms-task

  - name: testazurekms_task_group
    setup_group:
      - func: fetch source
      - func: prepare resources
      - func: fix absolute paths
      - func: make files executable
      - command: subprocess.exec
        params:
          binary: bash
          env:
            AZUREKMS_VMNAME_PREFIX: "PYTHON_DRIVER"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/create-and-setup-vm.sh
    teardown_group:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/delete-vm.sh
      - func: "upload test results"
    setup_group_can_fail_task: true
    teardown_task_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
    - testazurekms-task

  - name: testazureoidc_task_group
    setup_group:
      - func: fetch source
      - func: prepare resources
      - func: fix absolute paths
      - func: make files executable
      - command: subprocess.exec
        params:
          binary: bash
          env:
            AZUREOIDC_VMNAME_PREFIX: "PYTHON_DRIVER"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure/create-and-setup-vm.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure/delete-vm.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-azure

  - name: testgcpoidc_task_group
    setup_group:
      - func: fetch source
      - func: prepare resources
      - func: fix absolute paths
      - func: make files executable
      - command: subprocess.exec
        params:
          binary: bash
          env:
            GCPOIDC_VMNAME_PREFIX: "PYTHON_DRIVER"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/gcp/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/gcp/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-gcp

  - name: testoidc_task_group
    setup_group:
      - func: fetch source
      - func: prepare resources
      - func: fix absolute paths
      - func: make files executable
      - func: "assume ec2 role"
      - command: subprocess.exec
        params:
          binary: bash
          include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
          env:
            # PYTHON-4447
            MONGODB_VERSION: "8.0"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/teardown.sh
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test

  - name: test_aws_lambda_task_group
    setup_group:
      - func: fetch source
      - func: prepare resources
      - func: setup atlas
    teardown_task:
      - func: teardown atlas
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - test-aws-lambda-deployed

  - name: test_atlas_task_group_search_indexes
    setup_group:
      - func: fetch source
      - func: prepare resources
      - func: fix absolute paths
      - func: make files executable
      - func: setup atlas
    teardown_task:
      - func: teardown atlas
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - test-search-index-helpers

tasks:
    # Wildcard task. Do you need to find out what tools are available and where?
    # Throw it here, and execute this task on all buildvariants
    - name: getdata
      commands:
        - command: shell.exec
          type: test
          params:
            script: |
               set -o xtrace
               . ${DRIVERS_TOOLS}/.evergreen/download-mongodb.sh || true
               get_distro || true
               echo $DISTRO
               echo $MARCH
               echo $OS
               uname -a || true
               ls /etc/*release* || true
               cc --version || true
               gcc --version || true
               clang --version || true
               gcov --version || true
               lcov --version || true
               llvm-cov --version || true
               echo $PATH
               ls -la /usr/local/Cellar/llvm/*/bin/ || true
               ls -la /usr/local/Cellar/ || true
               scan-build --version || true
               genhtml --version || true
               valgrind --version || true

# Standard test tasks {{{

    - name: "mockupdb"
      tags: ["mockupdb"]
      commands:
        - func: "run mockupdb tests"

    - name: "doctests"
      tags: ["doctests"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run doctests"

    - name: "test-4.0-standalone"
      tags: ["4.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-4.0-replica_set"
      tags: ["4.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-4.0-sharded_cluster"
      tags: ["4.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-4.2-standalone"
      tags: ["4.2", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.2"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-4.2-replica_set"
      tags: ["4.2", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.2"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-4.2-sharded_cluster"
      tags: ["4.2", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.2"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-4.4-standalone"
      tags: ["4.4", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.4"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-4.4-replica_set"
      tags: ["4.4", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.4"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-4.4-sharded_cluster"
      tags: ["4.4", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.4"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-5.0-standalone"
      tags: ["5.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "5.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-5.0-replica_set"
      tags: ["5.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "5.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-5.0-sharded_cluster"
      tags: ["5.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "5.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-6.0-standalone"
      tags: ["6.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "6.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-6.0-replica_set"
      tags: ["6.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "6.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-6.0-sharded_cluster"
      tags: ["6.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "6.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-8.0-standalone"
      tags: ["8.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "8.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-8.0-replica_set"
      tags: ["8.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "8.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-8.0-sharded_cluster"
      tags: ["8.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "8.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-7.0-standalone"
      tags: ["7.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "7.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-7.0-replica_set"
      tags: ["7.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "7.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-7.0-sharded_cluster"
      tags: ["7.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "7.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-latest-standalone"
      tags: ["latest", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-latest-replica_set"
      tags: ["latest", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-latest-sharded_cluster"
      tags: ["latest", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-rapid-standalone"
      tags: ["rapid", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "rapid"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-rapid-replica_set"
      tags: ["rapid", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "rapid"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-rapid-sharded_cluster"
      tags: ["rapid", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "rapid"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-serverless"
      tags: ["serverless"]
      commands:
        - func: "run tests"

    - name: "test-enterprise-auth"
      tags: ["enterprise-auth"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "assume ec2 role"
        - func: "run enterprise auth tests"

    - name: "test-search-index-helpers"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "6.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"
          vars:
            TEST_INDEX_MANAGEMENT: "1"

    - name: "mod-wsgi-standalone"
      tags: ["mod_wsgi"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run mod_wsgi tests"

    - name: "mod-wsgi-replica-set"
      tags: ["mod_wsgi"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "replica_set"
        - func: "run mod_wsgi tests"

    - name: "mod-wsgi-embedded-mode-standalone"
      tags: ["mod_wsgi"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run mod_wsgi tests"
          vars:
            MOD_WSGI_EMBEDDED: "1"

    - name: "mod-wsgi-embedded-mode-replica-set"
      tags: ["mod_wsgi"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "replica_set"
        - func: "run mod_wsgi tests"
          vars:
            MOD_WSGI_EMBEDDED: "1"

    - name: "no-server"
      tags: ["no-server"]
      commands:
        - func: "run tests"

    - name: "atlas-connect"
      tags: ["atlas-connect"]
      commands:
        - func: "assume ec2 role"
        - func: "run atlas tests"

    - name: atlas-data-lake-tests
      commands:
        - func: "bootstrap data lake"
        - func: "run tests"
          vars:
            TEST_DATA_LAKE: "true"

    - name: "test-aws-lambda-deployed"
      commands:
        - func: "install dependencies"
        - command: ec2.assume_role
          params:
            role_arn: ${LAMBDA_AWS_ROLE_ARN}
            duration_seconds: 3600
        - command: subprocess.exec
          params:
            working_dir: src
            binary: bash
            add_expansions_to_env: true
            args:
              - .evergreen/run-deployed-lambda-aws-tests.sh
            env:
              TEST_LAMBDA_DIRECTORY: ${PROJECT_DIRECTORY}/test/lambda

    - name: test-ocsp-rsa-valid-cert-server-staples
      tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: "valid"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-invalid-cert-server-staples
      tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: "revoked"
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-valid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: valid
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-invalid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: revoked
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-soft-fail
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-malicious-invalid-cert-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: revoked
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-malicious-no-responder-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-delegate-valid-cert-server-staples
      tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: valid-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-delegate-invalid-cert-server-staples
      tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: revoked-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-delegate-valid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: valid-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-rsa-delegate-invalid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: revoked-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-rsa-delegate-malicious-invalid-cert-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-rsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "rsa"
            SERVER_TYPE: revoked-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "rsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-valid-cert-server-staples
      tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: valid
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-invalid-cert-server-staples
      tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: revoked
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-valid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: valid
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-invalid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: revoked
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-soft-fail
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-malicious-invalid-cert-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: revoked
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-malicious-no-responder-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-delegate-valid-cert-server-staples
      tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: valid-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-delegate-invalid-cert-server-staples
      tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: revoked-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-delegate-valid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: valid-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "true"

    - name: test-ocsp-ecdsa-delegate-invalid-cert-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: revoked-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: test-ocsp-ecdsa-delegate-malicious-invalid-cert-mustStaple-server-does-not-staple
      tags: ["ocsp", "ocsp-ecdsa"]
      commands:
        - func: run-ocsp-server
          vars:
            OCSP_ALGORITHM: "ecdsa"
            SERVER_TYPE: valid-delegate
        - func: "bootstrap mongo-orchestration"
          vars:
            ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json"
        - func: run-ocsp-test
          vars:
            OCSP_ALGORITHM: "ecdsa"
            OCSP_TLS_SHOULD_SUCCEED: "false"

    - name: "aws-auth-test-4.4"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            AUTH: "auth"
            ORCHESTRATION_FILE: "auth-aws.json"
            TOPOLOGY: "server"
            VERSION: "4.4"
        - func: "assume ec2 role"
        - func: "get aws auth secrets"
        - func: "run aws auth test with regular aws credentials"
        - func: "run aws auth test with assume role credentials"
        - func: "run aws auth test with aws credentials as environment variables"
        - func: "run aws auth test with aws credentials and session token as environment variables"
        - func: "run aws auth test with aws EC2 credentials"
        - func: "run aws auth test with aws web identity credentials"
        - func: "run aws ECS auth test"

    - name: "aws-auth-test-5.0"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            AUTH: "auth"
            ORCHESTRATION_FILE: "auth-aws.json"
            TOPOLOGY: "server"
            VERSION: "5.0"
        - func: "assume ec2 role"
        - func: "get aws auth secrets"
        - func: "run aws auth test with regular aws credentials"
        - func: "run aws auth test with assume role credentials"
        - func: "run aws auth test with aws credentials as environment variables"
        - func: "run aws auth test with aws credentials and session token as environment variables"
        - func: "run aws auth test with aws EC2 credentials"
        - func: "run aws auth test with aws web identity credentials"
        - func: "run aws ECS auth test"

    - name: "aws-auth-test-6.0"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            AUTH: "auth"
            ORCHESTRATION_FILE: "auth-aws.json"
            TOPOLOGY: "server"
            VERSION: "6.0"
        - func: "assume ec2 role"
        - func: "get aws auth secrets"
        - func: "run aws auth test with regular aws credentials"
        - func: "run aws auth test with assume role credentials"
        - func: "run aws auth test with aws credentials as environment variables"
        - func: "run aws auth test with aws credentials and session token as environment variables"
        - func: "run aws auth test with aws EC2 credentials"
        - func: "run aws auth test with aws web identity credentials"
        - func: "run aws ECS auth test"

    - name: "aws-auth-test-7.0"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            AUTH: "auth"
            ORCHESTRATION_FILE: "auth-aws.json"
            TOPOLOGY: "server"
            VERSION: "7.0"
        - func: "assume ec2 role"
        - func: "get aws auth secrets"
        - func: "run aws auth test with regular aws credentials"
        - func: "run aws auth test with assume role credentials"
        - func: "run aws auth test with aws credentials as environment variables"
        - func: "run aws auth test with aws credentials and session token as environment variables"
        - func: "run aws auth test with aws EC2 credentials"
        - func: "run aws auth test with aws web identity credentials"
        - func: "run aws ECS auth test"

    - name: "aws-auth-test-8.0"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            AUTH: "auth"
            ORCHESTRATION_FILE: "auth-aws.json"
            TOPOLOGY: "server"
            VERSION: "8.0"
        - func: "assume ec2 role"
        - func: "get aws auth secrets"
        - func: "run aws auth test with regular aws credentials"
        - func: "run aws auth test with assume role credentials"
        - func: "run aws auth test with aws credentials as environment variables"
        - func: "run aws auth test with aws credentials and session token as environment variables"
        - func: "run aws auth test with aws EC2 credentials"
        - func: "run aws auth test with aws web identity credentials"
        - func: "run aws ECS auth test"

    - name: "aws-auth-test-rapid"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            AUTH: "auth"
            ORCHESTRATION_FILE: "auth-aws.json"
            TOPOLOGY: "server"
            VERSION: "rapid"
        - func: "assume ec2 role"
        - func: "get aws auth secrets"
        - func: "run aws auth test with regular aws credentials"
        - func: "run aws auth test with assume role credentials"
        - func: "run aws auth test with aws credentials as environment variables"
        - func: "run aws auth test with aws credentials and session token as environment variables"
        - func: "run aws auth test with aws EC2 credentials"
        - func: "run aws auth test with aws web identity credentials"
        - func: "run aws ECS auth test"

    - name: "aws-auth-test-latest"
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            AUTH: "auth"
            ORCHESTRATION_FILE: "auth-aws.json"
            TOPOLOGY: "server"
            VERSION: "latest"
        - func: "assume ec2 role"
        - func: "get aws auth secrets"
        - func: "run aws auth test with regular aws credentials"
        - func: "run aws auth test with assume role credentials"
        - func: "run aws auth test with aws credentials as environment variables"
        - func: "run aws auth test with aws credentials and session token as environment variables"
        - func: "run aws auth test with aws EC2 credentials"
        - func: "run aws auth test with aws web identity credentials"
        - func: "run aws ECS auth test"

    - name: load-balancer-test
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            TOPOLOGY: "sharded_cluster"
            LOAD_BALANCER: true
        - func: "run load-balancer"
        - func: "run tests"

    - name: "oidc-auth-test"
      commands:
      - func: "run oidc auth test with test credentials"

    - name: "oidc-auth-test-azure"
      commands:
      - command: shell.exec
        type: test
        params:
          shell: bash
          script: |-
            set -o errexit
            . src/.evergreen/scripts/env.sh
            cd src
            git add .
            git commit -m "add files"
            export AZUREOIDC_DRIVERS_TAR_FILE=/tmp/mongo-python-driver.tgz
            git archive -o $AZUREOIDC_DRIVERS_TAR_FILE HEAD
            export AZUREOIDC_TEST_CMD="OIDC_ENV=azure ./.evergreen/run-mongodb-oidc-test.sh"
            bash $DRIVERS_TOOLS/.evergreen/auth_oidc/azure/run-driver-test.sh

    - name: "oidc-auth-test-gcp"
      commands:
      - command: shell.exec
        type: test
        params:
          shell: bash
          script: |-
            set -o errexit
            . src/.evergreen/scripts/env.sh
            cd src
            git add .
            git commit -m "add files"
            export GCPOIDC_DRIVERS_TAR_FILE=/tmp/mongo-python-driver.tgz
            git archive -o $GCPOIDC_DRIVERS_TAR_FILE HEAD
            # Define the command to run on the VM.
            # Ensure that we source the environment file created for us, set up any other variables we need,
            # and then run our test suite on the vm.
            export GCPOIDC_TEST_CMD="OIDC_ENV=gcp ./.evergreen/run-mongodb-oidc-test.sh"
            bash $DRIVERS_TOOLS/.evergreen/auth_oidc/gcp/run-driver-test.sh

    - name: "test-fips-standalone"
      tags: ["fips"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run tests"
# }}}
    - name: "coverage-report"
      tags: ["coverage"]
      depends_on:
        # BUILD-3165: We can't use "*" (all tasks) and specify "variant".
        # Instead list out all coverage tasks using tags.
        - name: ".standalone"
          variant: ".coverage_tag"
          # Run the coverage task even if some tasks fail.
          status: "*"
          # Run the coverage task even if some tasks are not scheduled in a patch build.
          patch_optional: true
        - name: ".replica_set"
          variant: ".coverage_tag"
          status: "*"
          patch_optional: true
        - name: ".sharded_cluster"
          variant: ".coverage_tag"
          status: "*"
          patch_optional: true
      commands:
        - func: "download and merge coverage"

    - name: "testgcpkms-task"
      commands:
        - command: subprocess.exec
          type: setup
          params:
            working_dir: "src"
            binary: "bash"
            include_expansions_in_env: ["DRIVERS_TOOLS"]
            args:
              - .evergreen/run-gcpkms-test.sh

    - name: "testgcpkms-fail-task"
      # testgcpkms-fail-task runs in a non-GCE environment.
      # It is expected to fail to obtain GCE credentials.
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - command: shell.exec
          type: test
          params:
            working_dir: "src"
            shell: "bash"
            script: |
              . .evergreen/scripts/env.sh
              export PYTHON_BINARY=/opt/mongodbtoolchain/v4/bin/python3
              export LIBMONGOCRYPT_URL=https://s3.amazonaws.com/mciuploads/libmongocrypt/debian11/master/latest/libmongocrypt.tar.gz
              SKIP_SERVERS=1 bash ./.evergreen/setup-encryption.sh
              SUCCESS=false TEST_FLE_GCP_AUTO=1 ./.evergreen/hatch.sh test:test-eg

    - name: testazurekms-task
      commands:
      - command: subprocess.exec
        params:
          binary: bash
          working_dir: src
          include_expansions_in_env: ["DRIVERS_TOOLS"]
          args:
            - .evergreen/run-azurekms-test.sh

    - name: testazurekms-fail-task
      commands:
      - func: fetch source
      - func: make files executable
      - func: "bootstrap mongo-orchestration"
        vars:
          VERSION: "latest"
          TOPOLOGY: "server"
      - command: subprocess.exec
        type: test
        params:
          binary: bash
          working_dir: src
          include_expansions_in_env: ["DRIVERS_TOOLS"]
          args:
            - .evergreen/run-azurekms-fail-test.sh

    - name: "perf-6.0-standalone"
      tags: ["perf"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "v6.0-perf"
            TOPOLOGY: "server"
        - func: "run perf tests"
        - func: "attach benchmark test results"
        - func: "send dashboard data"

    - name: "perf-6.0-standalone-ssl"
      tags: ["perf"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "v6.0-perf"
            TOPOLOGY: "server"
            SSL: "ssl"
        - func: "run perf tests"
        - func: "attach benchmark test results"
        - func: "send dashboard data"

    - name: "perf-8.0-standalone"
      tags: ["perf"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "8.0"
            TOPOLOGY: "server"
        - func: "run perf tests"
        - func: "attach benchmark test results"
        - func: "send dashboard data"

    - name: "assign-pr-reviewer"
      tags: ["pr"]
      allowed_requesters: ["patch", "github_pr"]
      commands:
        - command: shell.exec
          type: test
          params:
            shell: "bash"
            working_dir: src
            script: |
              . .evergreen/scripts/env.sh
              set -x
              export CONFIG=$PROJECT_DIRECTORY/.github/reviewers.txt
              export SCRIPT="$DRIVERS_TOOLS/.evergreen/github_app/assign-reviewer.sh"
              bash $SCRIPT -p $CONFIG -h ${github_commit} -o "mongodb" -n "mongo-python-driver"
              echo '{"results": [{ "status": "PASS", "test_file": "Build", "log_raw": "Test completed"  } ]}' > ${PROJECT_DIRECTORY}/test-results.json

    - name: "check-import-time"
      tags: ["pr"]
      commands:
        - command: shell.exec
          type: test
          params:
            shell: "bash"
            working_dir: src
            script: |
              . .evergreen/scripts/env.sh
              set -x
              export BASE_SHA=${revision}
              export HEAD_SHA=${github_commit}
              bash .evergreen/run-import-time-test.sh

    - name: "backport-pr"
      allowed_requesters: ["commit"]
      commands:
      - command: subprocess.exec
        type: test
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/github_app/backport-pr.sh
            - mongodb
            - mongo-python-driver
            - ${github_commit}

axes:
  # Choice of distro
  - id: platform
    display_name: OS
    values:
      - id: macos
        display_name: "macOS"
        run_on: macos-14
        variables:
          skip_EC2_auth_test: true
          skip_ECS_auth_test: true
          skip_web_identity_auth_test: true
          # CSOT tests are unreliable on our slow macOS hosts.
          SKIP_CSOT_TESTS: true
      - id: macos-arm64
        display_name: "macOS Arm64"
        run_on: macos-14-arm64
        variables:
          skip_EC2_auth_test: true
          skip_ECS_auth_test: true
          skip_web_identity_auth_test: true
          # CSOT tests are unreliable on our slow macOS hosts.
          SKIP_CSOT_TESTS: true
      - id: rhel7
        display_name: "RHEL 7.x"
        run_on: rhel79-small
        batchtime: 10080  # 7 days
      - id: rhel8
        display_name: "RHEL 8.x"
        run_on: rhel8.8-small
        batchtime: 10080  # 7 days
      - id: rhel9-fips
        display_name: "RHEL 9 FIPS"
        run_on: rhel92-fips
        batchtime: 10080  # 7 days
      - id: ubuntu-22.04
        display_name: "Ubuntu 22.04"
        run_on: ubuntu2204-small
        batchtime: 10080  # 7 days
      - id: ubuntu-20.04
        display_name: "Ubuntu 20.04"
        run_on: ubuntu2004-small
        batchtime: 10080  # 7 days
      - id: rhel8-zseries
        display_name: "RHEL 8 (zSeries)"
        run_on: rhel8-zseries-small
        batchtime: 10080  # 7 days
        variables:
          SKIP_HATCH: true
      - id: rhel8-power8
        display_name: "RHEL 8 (POWER8)"
        run_on: rhel8-power-small
        batchtime: 10080  # 7 days
        variables:
          SKIP_HATCH: true
      - id: rhel8-arm64
        display_name: "RHEL 8 (ARM64)"
        run_on: rhel82-arm64-small
        batchtime: 10080  # 7 days
        variables:
      - id: windows
        display_name: "Windows 64"
        run_on: windows-64-vsMulti-small
        batchtime: 10080  # 7 days
        variables:
          skip_ECS_auth_test: true
          skip_EC2_auth_test: true
          skip_web_identity_auth_test: true
          venv_bin_dir: "Scripts"
          # CSOT tests are unreliable on our slow Windows hosts.
          SKIP_CSOT_TESTS: true

  # Test with authentication?
  - id: auth
    display_name: Authentication
    values:
      - id: auth
        display_name: Auth
        variables:
           AUTH: "auth"
      - id: noauth
        display_name: NoAuth
        variables:
           AUTH: "noauth"

  # Test with SSL?
  - id: ssl
    display_name: SSL
    values:
      - id: ssl
        display_name: SSL
        variables:
           SSL: "ssl"
      - id: nossl
        display_name: NoSSL
        variables:
           SSL: "nossl"

  # Test with Auth + SSL (combined for convenience)?
  - id: auth-ssl
    display_name: Auth SSL
    values:
      - id: auth-ssl
        display_name: Auth SSL
        variables:
           AUTH: "auth"
           SSL: "ssl"
      - id: noauth-nossl
        display_name: NoAuth NoSSL
        variables:
           AUTH: "noauth"
           SSL: "nossl"

  # Choice of Python runtime version
  - id: python-version
    display_name: "Python"
    values:
      # Note: always display platform with python-version to avoid ambiguous display names.
      # Linux
      - id: "3.9"
        display_name: "Python 3.9"
        variables:
          PYTHON_BINARY: "/opt/python/3.9/bin/python3"
      - id: "3.10"
        display_name: "Python 3.10"
        variables:
          PYTHON_BINARY: "/opt/python/3.10/bin/python3"
      - id: "3.11"
        display_name: "Python 3.11"
        variables:
          PYTHON_BINARY: "/opt/python/3.11/bin/python3"
      - id: "3.12"
        display_name: "Python 3.12"
        variables:
          PYTHON_BINARY: "/opt/python/3.12/bin/python3"
      - id: "3.13"
        display_name: "Python 3.13"
        variables:
          PYTHON_BINARY: "/opt/python/3.13/bin/python3"
      - id: "pypy3.9"
        display_name: "PyPy 3.9"
        variables:
           PYTHON_BINARY: "/opt/python/pypy3.9/bin/pypy3"
      - id: "pypy3.10"
        display_name: "PyPy 3.10"
        variables:
           PYTHON_BINARY: "/opt/python/pypy3.10/bin/pypy3"

  - id: python-version-windows
    display_name: "Python"
    values:
      - id: "3.9"
        display_name: "Python 3.9"
        variables:
          PYTHON_BINARY: "C:/python/Python39/python.exe"
      - id: "3.10"
        display_name: "Python 3.10"
        variables:
          PYTHON_BINARY: "C:/python/Python310/python.exe"
      - id: "3.11"
        display_name: "Python 3.11"
        variables:
          PYTHON_BINARY: "C:/python/Python311/python.exe"
      - id: "3.12"
        display_name: "Python 3.12"
        variables:
          PYTHON_BINARY: "C:/python/Python312/python.exe"
      - id: "3.13"
        display_name: "Python 3.13"
        variables:
          PYTHON_BINARY: "C:/python/Python313/python.exe"

buildvariants:
# Server Tests for RHEL8.
- name: test-rhel8-py3.9-auth-ssl-cov
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Test RHEL8 py3.9 Auth SSL cov
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: ssl
    COVERAGE: coverage
    PYTHON_BINARY: /opt/python/3.9/bin/python3
  tags: [coverage_tag]
- name: test-rhel8-py3.9-noauth-ssl-cov
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Test RHEL8 py3.9 NoAuth SSL cov
  run_on:
    - rhel87-small
  expansions:
    AUTH: noauth
    SSL: ssl
    COVERAGE: coverage
    PYTHON_BINARY: /opt/python/3.9/bin/python3
  tags: [coverage_tag]
- name: test-rhel8-py3.9-noauth-nossl-cov
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Test RHEL8 py3.9 NoAuth NoSSL cov
  run_on:
    - rhel87-small
  expansions:
    AUTH: noauth
    SSL: nossl
    COVERAGE: coverage
    PYTHON_BINARY: /opt/python/3.9/bin/python3
  tags: [coverage_tag]
- name: test-rhel8-py3.13-auth-ssl-cov
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Test RHEL8 py3.13 Auth SSL cov
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: ssl
    COVERAGE: coverage
    PYTHON_BINARY: /opt/python/3.13/bin/python3
  tags: [coverage_tag]
- name: test-rhel8-py3.13-noauth-ssl-cov
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Test RHEL8 py3.13 NoAuth SSL cov
  run_on:
    - rhel87-small
  expansions:
    AUTH: noauth
    SSL: ssl
    COVERAGE: coverage
    PYTHON_BINARY: /opt/python/3.13/bin/python3
  tags: [coverage_tag]
- name: test-rhel8-py3.13-noauth-nossl-cov
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Test RHEL8 py3.13 NoAuth NoSSL cov
  run_on:
    - rhel87-small
  expansions:
    AUTH: noauth
    SSL: nossl
    COVERAGE: coverage
    PYTHON_BINARY: /opt/python/3.13/bin/python3
  tags: [coverage_tag]
- name: test-rhel8-pypy3.10-auth-ssl-cov
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Test RHEL8 pypy3.10 Auth SSL cov
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: ssl
    COVERAGE: coverage
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
  tags: [coverage_tag]
- name: test-rhel8-pypy3.10-noauth-ssl-cov
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Test RHEL8 pypy3.10 NoAuth SSL cov
  run_on:
    - rhel87-small
  expansions:
    AUTH: noauth
    SSL: ssl
    COVERAGE: coverage
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
  tags: [coverage_tag]
- name: test-rhel8-pypy3.10-noauth-nossl-cov
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Test RHEL8 pypy3.10 NoAuth NoSSL cov
  run_on:
    - rhel87-small
  expansions:
    AUTH: noauth
    SSL: nossl
    COVERAGE: coverage
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
  tags: [coverage_tag]
- name: test-rhel8-py3.10-auth-ssl
  tasks:
    - name: .standalone
  display_name: Test RHEL8 py3.10 Auth SSL
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.10/bin/python3
- name: test-rhel8-py3.11-noauth-ssl
  tasks:
    - name: .replica_set
  display_name: Test RHEL8 py3.11 NoAuth SSL
  run_on:
    - rhel87-small
  expansions:
    AUTH: noauth
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.11/bin/python3
- name: test-rhel8-py3.12-noauth-nossl
  tasks:
    - name: .sharded_cluster
  display_name: Test RHEL8 py3.12 NoAuth NoSSL
  run_on:
    - rhel87-small
  expansions:
    AUTH: noauth
    SSL: nossl
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: test-rhel8-pypy3.9-auth-ssl
  tasks:
    - name: .standalone
  display_name: Test RHEL8 pypy3.9 Auth SSL
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: ssl
    PYTHON_BINARY: /opt/python/pypy3.9/bin/python3

# Server tests for MacOS.
- name: test-macos-py3.9-auth-ssl-sync
  tasks:
    - name: .standalone
  display_name: Test macOS py3.9 Auth SSL Sync
  run_on:
    - macos-14
  expansions:
    AUTH: auth
    SSL: ssl
    TEST_SUITES: default
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
    SKIP_CSOT_TESTS: "true"
- name: test-macos-py3.9-auth-ssl-async
  tasks:
    - name: .standalone
  display_name: Test macOS py3.9 Auth SSL Async
  run_on:
    - macos-14
  expansions:
    AUTH: auth
    SSL: ssl
    TEST_SUITES: default_async
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
    SKIP_CSOT_TESTS: "true"
- name: test-macos-py3.13-noauth-ssl-sync
  tasks:
    - name: .replica_set
  display_name: Test macOS py3.13 NoAuth SSL Sync
  run_on:
    - macos-14
  expansions:
    AUTH: noauth
    SSL: ssl
    TEST_SUITES: default
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.13/bin/python3
    SKIP_CSOT_TESTS: "true"
- name: test-macos-py3.13-noauth-ssl-async
  tasks:
    - name: .replica_set
  display_name: Test macOS py3.13 NoAuth SSL Async
  run_on:
    - macos-14
  expansions:
    AUTH: noauth
    SSL: ssl
    TEST_SUITES: default_async
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.13/bin/python3
    SKIP_CSOT_TESTS: "true"
- name: test-macos-py3.9-noauth-nossl-sync
  tasks:
    - name: .sharded_cluster
  display_name: Test macOS py3.9 NoAuth NoSSL Sync
  run_on:
    - macos-14
  expansions:
    AUTH: noauth
    SSL: nossl
    TEST_SUITES: default
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
    SKIP_CSOT_TESTS: "true"
- name: test-macos-py3.9-noauth-nossl-async
  tasks:
    - name: .sharded_cluster
  display_name: Test macOS py3.9 NoAuth NoSSL Async
  run_on:
    - macos-14
  expansions:
    AUTH: noauth
    SSL: nossl
    TEST_SUITES: default_async
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
    SKIP_CSOT_TESTS: "true"

# Server tests for macOS Arm64.
- name: test-macos-arm64-py3.9-auth-ssl-sync
  tasks:
    - name: .standalone .6.0
    - name: .standalone .7.0
    - name: .standalone .8.0
    - name: .standalone .rapid
    - name: .standalone .latest
  display_name: Test macOS Arm64 py3.9 Auth SSL Sync
  run_on:
    - macos-14-arm64
  expansions:
    AUTH: auth
    SSL: ssl
    TEST_SUITES: default
    SKIP_CSOT_TESTS: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
- name: test-macos-arm64-py3.9-auth-ssl-async
  tasks:
    - name: .standalone .6.0
    - name: .standalone .7.0
    - name: .standalone .8.0
    - name: .standalone .rapid
    - name: .standalone .latest
  display_name: Test macOS Arm64 py3.9 Auth SSL Async
  run_on:
    - macos-14-arm64
  expansions:
    AUTH: auth
    SSL: ssl
    TEST_SUITES: default_async
    SKIP_CSOT_TESTS: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
- name: test-macos-arm64-py3.13-noauth-ssl-sync
  tasks:
    - name: .replica_set .6.0
    - name: .replica_set .7.0
    - name: .replica_set .8.0
    - name: .replica_set .rapid
    - name: .replica_set .latest
  display_name: Test macOS Arm64 py3.13 NoAuth SSL Sync
  run_on:
    - macos-14-arm64
  expansions:
    AUTH: noauth
    SSL: ssl
    TEST_SUITES: default
    SKIP_CSOT_TESTS: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.13/bin/python3
- name: test-macos-arm64-py3.13-noauth-ssl-async
  tasks:
    - name: .replica_set .6.0
    - name: .replica_set .7.0
    - name: .replica_set .8.0
    - name: .replica_set .rapid
    - name: .replica_set .latest
  display_name: Test macOS Arm64 py3.13 NoAuth SSL Async
  run_on:
    - macos-14-arm64
  expansions:
    AUTH: noauth
    SSL: ssl
    TEST_SUITES: default_async
    SKIP_CSOT_TESTS: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.13/bin/python3
- name: test-macos-arm64-py3.9-noauth-nossl-sync
  tasks:
    - name: .sharded_cluster .6.0
    - name: .sharded_cluster .7.0
    - name: .sharded_cluster .8.0
    - name: .sharded_cluster .rapid
    - name: .sharded_cluster .latest
  display_name: Test macOS Arm64 py3.9 NoAuth NoSSL Sync
  run_on:
    - macos-14-arm64
  expansions:
    AUTH: noauth
    SSL: nossl
    TEST_SUITES: default
    SKIP_CSOT_TESTS: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
- name: test-macos-arm64-py3.9-noauth-nossl-async
  tasks:
    - name: .sharded_cluster .6.0
    - name: .sharded_cluster .7.0
    - name: .sharded_cluster .8.0
    - name: .sharded_cluster .rapid
    - name: .sharded_cluster .latest
  display_name: Test macOS Arm64 py3.9 NoAuth NoSSL Async
  run_on:
    - macos-14-arm64
  expansions:
    AUTH: noauth
    SSL: nossl
    TEST_SUITES: default_async
    SKIP_CSOT_TESTS: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3

# Server tests for Windows.
- name: test-win64-py3.9-auth-ssl-sync
  tasks:
    - name: .standalone
  display_name: Test Win64 py3.9 Auth SSL Sync
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: auth
    SSL: ssl
    TEST_SUITES: default
    PYTHON_BINARY: C:/python/Python39/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win64-py3.9-auth-ssl-async
  tasks:
    - name: .standalone
  display_name: Test Win64 py3.9 Auth SSL Async
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: auth
    SSL: ssl
    TEST_SUITES: default_async
    PYTHON_BINARY: C:/python/Python39/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win64-py3.13-noauth-ssl-sync
  tasks:
    - name: .replica_set
  display_name: Test Win64 py3.13 NoAuth SSL Sync
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: noauth
    SSL: ssl
    TEST_SUITES: default
    PYTHON_BINARY: C:/python/Python313/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win64-py3.13-noauth-ssl-async
  tasks:
    - name: .replica_set
  display_name: Test Win64 py3.13 NoAuth SSL Async
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: noauth
    SSL: ssl
    TEST_SUITES: default_async
    PYTHON_BINARY: C:/python/Python313/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win64-py3.9-noauth-nossl-sync
  tasks:
    - name: .sharded_cluster
  display_name: Test Win64 py3.9 NoAuth NoSSL Sync
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: noauth
    SSL: nossl
    TEST_SUITES: default
    PYTHON_BINARY: C:/python/Python39/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win64-py3.9-noauth-nossl-async
  tasks:
    - name: .sharded_cluster
  display_name: Test Win64 py3.9 NoAuth NoSSL Async
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: noauth
    SSL: nossl
    TEST_SUITES: default_async
    PYTHON_BINARY: C:/python/Python39/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win32-py3.9-auth-ssl-sync
  tasks:
    - name: .standalone
  display_name: Test Win32 py3.9 Auth SSL Sync
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: auth
    SSL: ssl
    TEST_SUITES: default
    PYTHON_BINARY: C:/python/32/Python39/python.exe
    SKIP_CSOT_TESTS: "true"

# Server tests for Win32.
- name: test-win32-py3.9-auth-ssl-async
  tasks:
    - name: .standalone
  display_name: Test Win32 py3.9 Auth SSL Async
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: auth
    SSL: ssl
    TEST_SUITES: default_async
    PYTHON_BINARY: C:/python/32/Python39/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win32-py3.13-noauth-ssl-sync
  tasks:
    - name: .replica_set
  display_name: Test Win32 py3.13 NoAuth SSL Sync
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: noauth
    SSL: ssl
    TEST_SUITES: default
    PYTHON_BINARY: C:/python/32/Python313/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win32-py3.13-noauth-ssl-async
  tasks:
    - name: .replica_set
  display_name: Test Win32 py3.13 NoAuth SSL Async
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: noauth
    SSL: ssl
    TEST_SUITES: default_async
    PYTHON_BINARY: C:/python/32/Python313/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win32-py3.9-noauth-nossl-sync
  tasks:
    - name: .sharded_cluster
  display_name: Test Win32 py3.9 NoAuth NoSSL Sync
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: noauth
    SSL: nossl
    TEST_SUITES: default
    PYTHON_BINARY: C:/python/32/Python39/python.exe
    SKIP_CSOT_TESTS: "true"
- name: test-win32-py3.9-noauth-nossl-async
  tasks:
    - name: .sharded_cluster
  display_name: Test Win32 py3.9 NoAuth NoSSL Async
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: noauth
    SSL: nossl
    TEST_SUITES: default_async
    PYTHON_BINARY: C:/python/32/Python39/python.exe
    SKIP_CSOT_TESTS: "true"

# Encryption tests.
- name: encryption-rhel8-py3.9-auth-ssl
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Encryption RHEL8 py3.9 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
  tags: [encryption_tag]
- name: encryption-rhel8-py3.13-auth-ssl
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Encryption RHEL8 py3.13 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    PYTHON_BINARY: /opt/python/3.13/bin/python3
  tags: [encryption_tag]
- name: encryption-rhel8-pypy3.10-auth-ssl
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Encryption RHEL8 pypy3.10 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
  tags: [encryption_tag]
- name: encryption-crypt_shared-rhel8-py3.9-auth-ssl
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Encryption crypt_shared RHEL8 py3.9 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    test_crypt_shared: "true"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
  tags: [encryption_tag]
- name: encryption-crypt_shared-rhel8-py3.13-auth-ssl
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Encryption crypt_shared RHEL8 py3.13 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    test_crypt_shared: "true"
    PYTHON_BINARY: /opt/python/3.13/bin/python3
  tags: [encryption_tag]
- name: encryption-crypt_shared-rhel8-pypy3.10-auth-ssl
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Encryption crypt_shared RHEL8 pypy3.10 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    test_crypt_shared: "true"
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
  tags: [encryption_tag]
- name: encryption-pyopenssl-rhel8-py3.9-auth-ssl
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Encryption PyOpenSSL RHEL8 py3.9 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    test_encryption_pyopenssl: "true"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
  tags: [encryption_tag]
- name: encryption-pyopenssl-rhel8-py3.13-auth-ssl
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Encryption PyOpenSSL RHEL8 py3.13 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    test_encryption_pyopenssl: "true"
    PYTHON_BINARY: /opt/python/3.13/bin/python3
  tags: [encryption_tag]
- name: encryption-pyopenssl-rhel8-pypy3.10-auth-ssl
  tasks:
    - name: .standalone
    - name: .replica_set
    - name: .sharded_cluster
  display_name: Encryption PyOpenSSL RHEL8 pypy3.10 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    test_encryption_pyopenssl: "true"
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
  tags: [encryption_tag]
- name: encryption-rhel8-py3.10-auth-ssl
  tasks:
    - name: .replica_set
  display_name: Encryption RHEL8 py3.10 Auth SSL
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    PYTHON_BINARY: /opt/python/3.10/bin/python3
- name: encryption-crypt_shared-rhel8-py3.11-auth-nossl
  tasks:
    - name: .replica_set
  display_name: Encryption crypt_shared RHEL8 py3.11 Auth NoSSL
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: nossl
    test_encryption: "true"
    test_crypt_shared: "true"
    PYTHON_BINARY: /opt/python/3.11/bin/python3
- name: encryption-pyopenssl-rhel8-py3.12-auth-ssl
  tasks:
    - name: .replica_set
  display_name: Encryption PyOpenSSL RHEL8 py3.12 Auth SSL
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    TEST_ENCRYPTION_PYOPENSSL: "true"
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: encryption-rhel8-pypy3.9-auth-nossl
  tasks:
    - name: .replica_set
  display_name: Encryption RHEL8 pypy3.9 Auth NoSSL
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: nossl
    test_encryption: "true"
    PYTHON_BINARY: /opt/python/pypy3.9/bin/python3
- name: encryption-macos-py3.9-auth-ssl
  tasks:
    - name: .latest .replica_set
  display_name: Encryption macOS py3.9 Auth SSL
  run_on:
    - macos-14
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
  tags: [encryption_tag]
- name: encryption-macos-py3.13-auth-nossl
  tasks:
    - name: .latest .replica_set
  display_name: Encryption macOS py3.13 Auth NoSSL
  run_on:
    - macos-14
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: nossl
    test_encryption: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.13/bin/python3
  tags: [encryption_tag]
- name: encryption-crypt_shared-macos-py3.9-auth-ssl
  tasks:
    - name: .latest .replica_set
  display_name: Encryption crypt_shared macOS py3.9 Auth SSL
  run_on:
    - macos-14
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    test_crypt_shared: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
  tags: [encryption_tag]
- name: encryption-crypt_shared-macos-py3.13-auth-nossl
  tasks:
    - name: .latest .replica_set
  display_name: Encryption crypt_shared macOS py3.13 Auth NoSSL
  run_on:
    - macos-14
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: nossl
    test_encryption: "true"
    test_crypt_shared: "true"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.13/bin/python3
  tags: [encryption_tag]
- name: encryption-win64-py3.9-auth-ssl
  tasks:
    - name: .latest .replica_set
  display_name: Encryption Win64 py3.9 Auth SSL
  run_on:
    - windows-64-vsMulti-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    PYTHON_BINARY: C:/python/Python39/python.exe
  tags: [encryption_tag]
- name: encryption-win64-py3.13-auth-nossl
  tasks:
    - name: .latest .replica_set
  display_name: Encryption Win64 py3.13 Auth NoSSL
  run_on:
    - windows-64-vsMulti-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: nossl
    test_encryption: "true"
    PYTHON_BINARY: C:/python/Python313/python.exe
  tags: [encryption_tag]
- name: encryption-crypt_shared-win64-py3.9-auth-ssl
  tasks:
    - name: .latest .replica_set
  display_name: Encryption crypt_shared Win64 py3.9 Auth SSL
  run_on:
    - windows-64-vsMulti-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: ssl
    test_encryption: "true"
    test_crypt_shared: "true"
    PYTHON_BINARY: C:/python/Python39/python.exe
  tags: [encryption_tag]
- name: encryption-crypt_shared-win64-py3.13-auth-nossl
  tasks:
    - name: .latest .replica_set
  display_name: Encryption crypt_shared Win64 py3.13 Auth NoSSL
  run_on:
    - windows-64-vsMulti-small
  batchtime: 10080
  expansions:
    AUTH: auth
    SSL: nossl
    test_encryption: "true"
    test_crypt_shared: "true"
    PYTHON_BINARY: C:/python/Python313/python.exe
  tags: [encryption_tag]

# Compressor tests.
- name: snappy-compression-rhel8-py3.9-no-c
  tasks:
    - name: .standalone
  display_name: snappy compression RHEL8 py3.9 No C
  run_on:
    - rhel87-small
  expansions:
    COMPRESSORS: snappy
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: snappy-compression-rhel8-py3.10
  tasks:
    - name: .standalone
  display_name: snappy compression RHEL8 py3.10
  run_on:
    - rhel87-small
  expansions:
    COMPRESSORS: snappy
    PYTHON_BINARY: /opt/python/3.10/bin/python3
- name: zlib-compression-rhel8-py3.11-no-c
  tasks:
    - name: .standalone
  display_name: zlib compression RHEL8 py3.11 No C
  run_on:
    - rhel87-small
  expansions:
    COMPRESSORS: zlib
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.11/bin/python3
- name: zlib-compression-rhel8-py3.12
  tasks:
    - name: .standalone
  display_name: zlib compression RHEL8 py3.12
  run_on:
    - rhel87-small
  expansions:
    COMPRESSORS: zlib
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: zstd-compression-rhel8-py3.13-no-c
  tasks:
    - name: .standalone !.4.0
  display_name: zstd compression RHEL8 py3.13 No C
  run_on:
    - rhel87-small
  expansions:
    COMPRESSORS: zstd
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.13/bin/python3
- name: zstd-compression-rhel8-py3.9
  tasks:
    - name: .standalone !.4.0
  display_name: zstd compression RHEL8 py3.9
  run_on:
    - rhel87-small
  expansions:
    COMPRESSORS: zstd
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: snappy-compression-rhel8-pypy3.9
  tasks:
    - name: .standalone
  display_name: snappy compression RHEL8 pypy3.9
  run_on:
    - rhel87-small
  expansions:
    COMPRESSORS: snappy
    PYTHON_BINARY: /opt/python/pypy3.9/bin/python3
- name: zlib-compression-rhel8-pypy3.10
  tasks:
    - name: .standalone
  display_name: zlib compression RHEL8 pypy3.10
  run_on:
    - rhel87-small
  expansions:
    COMPRESSORS: zlib
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
- name: zstd-compression-rhel8-pypy3.9
  tasks:
    - name: .standalone !.4.0
  display_name: zstd compression RHEL8 pypy3.9
  run_on:
    - rhel87-small
  expansions:
    COMPRESSORS: zstd
    PYTHON_BINARY: /opt/python/pypy3.9/bin/python3

# Enterprise auth tests.
- name: enterprise-auth-macos-py3.9-auth
  tasks:
    - name: test-enterprise-auth
  display_name: Enterprise Auth macOS py3.9 Auth
  run_on:
    - macos-14
  expansions:
    AUTH: auth
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
- name: enterprise-auth-rhel8-py3.10-auth
  tasks:
    - name: test-enterprise-auth
  display_name: Enterprise Auth RHEL8 py3.10 Auth
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    PYTHON_BINARY: /opt/python/3.10/bin/python3
- name: enterprise-auth-rhel8-py3.11-auth
  tasks:
    - name: test-enterprise-auth
  display_name: Enterprise Auth RHEL8 py3.11 Auth
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    PYTHON_BINARY: /opt/python/3.11/bin/python3
- name: enterprise-auth-rhel8-py3.12-auth
  tasks:
    - name: test-enterprise-auth
  display_name: Enterprise Auth RHEL8 py3.12 Auth
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: enterprise-auth-win64-py3.13-auth
  tasks:
    - name: test-enterprise-auth
  display_name: Enterprise Auth Win64 py3.13 Auth
  run_on:
    - windows-64-vsMulti-small
  expansions:
    AUTH: auth
    PYTHON_BINARY: C:/python/Python313/python.exe
- name: enterprise-auth-rhel8-pypy3.9-auth
  tasks:
    - name: test-enterprise-auth
  display_name: Enterprise Auth RHEL8 pypy3.9 Auth
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    PYTHON_BINARY: /opt/python/pypy3.9/bin/python3
- name: enterprise-auth-rhel8-pypy3.10-auth
  tasks:
    - name: test-enterprise-auth
  display_name: Enterprise Auth RHEL8 pypy3.10 Auth
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3

# PyOpenSSL tests.
- name: pyopenssl-macos-py3.9
  tasks:
    - name: .replica_set
    - name: .7.0
  display_name: PyOpenSSL macOS py3.9
  run_on:
    - macos-14
  batchtime: 10080
  expansions:
    AUTH: noauth
    test_pyopenssl: "true"
    SSL: ssl
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
- name: pyopenssl-rhel8-py3.10
  tasks:
    - name: .replica_set
    - name: .7.0
  display_name: PyOpenSSL RHEL8 py3.10
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    test_pyopenssl: "true"
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.10/bin/python3
- name: pyopenssl-rhel8-py3.11
  tasks:
    - name: .replica_set
    - name: .7.0
  display_name: PyOpenSSL RHEL8 py3.11
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    test_pyopenssl: "true"
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.11/bin/python3
- name: pyopenssl-rhel8-py3.12
  tasks:
    - name: .replica_set
    - name: .7.0
  display_name: PyOpenSSL RHEL8 py3.12
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    test_pyopenssl: "true"
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: pyopenssl-win64-py3.13
  tasks:
    - name: .replica_set
    - name: .7.0
  display_name: PyOpenSSL Win64 py3.13
  run_on:
    - windows-64-vsMulti-small
  batchtime: 10080
  expansions:
    AUTH: auth
    test_pyopenssl: "true"
    SSL: ssl
    PYTHON_BINARY: C:/python/Python313/python.exe
- name: pyopenssl-rhel8-pypy3.9
  tasks:
    - name: .replica_set
    - name: .7.0
  display_name: PyOpenSSL RHEL8 pypy3.9
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    test_pyopenssl: "true"
    SSL: ssl
    PYTHON_BINARY: /opt/python/pypy3.9/bin/python3
- name: pyopenssl-rhel8-pypy3.10
  tasks:
    - name: .replica_set
    - name: .7.0
  display_name: PyOpenSSL RHEL8 pypy3.10
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    AUTH: auth
    test_pyopenssl: "true"
    SSL: ssl
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3

# Storage Engine tests.
- name: storage-inmemory-rhel8-py3.9
  tasks:
    - name: .standalone .4.0
    - name: .standalone .4.4
    - name: .standalone .5.0
    - name: .standalone .6.0
    - name: .standalone .7.0
    - name: .standalone .8.0
    - name: .standalone .rapid
    - name: .standalone .latest
  display_name: Storage InMemory RHEL8 py3.9
  run_on:
    - rhel87-small
  expansions:
    STORAGE_ENGINE: inmemory
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: storage-mmapv1-rhel8-py3.9
  tasks:
    - name: .standalone .4.0
    - name: .replica_set .4.0
  display_name: Storage MMAPv1 RHEL8 py3.9
  run_on:
    - rhel87-small
  expansions:
    STORAGE_ENGINE: mmapv1
    PYTHON_BINARY: /opt/python/3.9/bin/python3

# Versioned API tests.
- name: versioned-api-require-v1-rhel8-py3.9-auth
  tasks:
    - name: .standalone .5.0
    - name: .standalone .6.0
    - name: .standalone .7.0
    - name: .standalone .8.0
    - name: .standalone .rapid
    - name: .standalone .latest
  display_name: Versioned API require v1 RHEL8 py3.9 Auth
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    REQUIRE_API_VERSION: "1"
    MONGODB_API_VERSION: "1"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
  tags: [versionedApi_tag]
- name: versioned-api-accept-v2-rhel8-py3.9-auth
  tasks:
    - name: .standalone .5.0
    - name: .standalone .6.0
    - name: .standalone .7.0
    - name: .standalone .8.0
    - name: .standalone .rapid
    - name: .standalone .latest
  display_name: Versioned API accept v2 RHEL8 py3.9 Auth
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    ORCHESTRATION_FILE: versioned-api-testing.json
    PYTHON_BINARY: /opt/python/3.9/bin/python3
  tags: [versionedApi_tag]
- name: versioned-api-require-v1-rhel8-py3.13-auth
  tasks:
    - name: .standalone .5.0
    - name: .standalone .6.0
    - name: .standalone .7.0
    - name: .standalone .8.0
    - name: .standalone .rapid
    - name: .standalone .latest
  display_name: Versioned API require v1 RHEL8 py3.13 Auth
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    REQUIRE_API_VERSION: "1"
    MONGODB_API_VERSION: "1"
    PYTHON_BINARY: /opt/python/3.13/bin/python3
  tags: [versionedApi_tag]
- name: versioned-api-accept-v2-rhel8-py3.13-auth
  tasks:
    - name: .standalone .5.0
    - name: .standalone .6.0
    - name: .standalone .7.0
    - name: .standalone .8.0
    - name: .standalone .rapid
    - name: .standalone .latest
  display_name: Versioned API accept v2 RHEL8 py3.13 Auth
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    ORCHESTRATION_FILE: versioned-api-testing.json
    PYTHON_BINARY: /opt/python/3.13/bin/python3
  tags: [versionedApi_tag]

# Green framework tests.
- name: eventlet-rhel8-py3.9
  tasks:
    - name: .standalone
  display_name: Eventlet RHEL8 py3.9
  run_on:
    - rhel87-small
  expansions:
    GREEN_FRAMEWORK: eventlet
    AUTH: auth
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: gevent-rhel8-py3.9
  tasks:
    - name: .standalone
  display_name: Gevent RHEL8 py3.9
  run_on:
    - rhel87-small
  expansions:
    GREEN_FRAMEWORK: gevent
    AUTH: auth
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: eventlet-rhel8-py3.12
  tasks:
    - name: .standalone
  display_name: Eventlet RHEL8 py3.12
  run_on:
    - rhel87-small
  expansions:
    GREEN_FRAMEWORK: eventlet
    AUTH: auth
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: gevent-rhel8-py3.12
  tasks:
    - name: .standalone
  display_name: Gevent RHEL8 py3.12
  run_on:
    - rhel87-small
  expansions:
    GREEN_FRAMEWORK: gevent
    AUTH: auth
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.12/bin/python3

# No C Ext tests.
- name: no-c-ext-rhel8-py3.9
  tasks:
    - name: .standalone
  display_name: No C Ext RHEL8 py3.9
  run_on:
    - rhel87-small
  expansions:
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: no-c-ext-rhel8-py3.10
  tasks:
    - name: .replica_set
  display_name: No C Ext RHEL8 py3.10
  run_on:
    - rhel87-small
  expansions:
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.10/bin/python3
- name: no-c-ext-rhel8-py3.11
  tasks:
    - name: .sharded_cluster
  display_name: No C Ext RHEL8 py3.11
  run_on:
    - rhel87-small
  expansions:
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.11/bin/python3
- name: no-c-ext-rhel8-py3.12
  tasks:
    - name: .standalone
  display_name: No C Ext RHEL8 py3.12
  run_on:
    - rhel87-small
  expansions:
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: no-c-ext-rhel8-py3.13
  tasks:
    - name: .replica_set
  display_name: No C Ext RHEL8 py3.13
  run_on:
    - rhel87-small
  expansions:
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.13/bin/python3

# Atlas Data Lake tests.
- name: atlas-data-lake-rhel8-py3.9-no-c
  tasks:
    - name: atlas-data-lake-tests
  display_name: Atlas Data Lake RHEL8 py3.9 No C
  run_on:
    - rhel87-small
  expansions:
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: atlas-data-lake-rhel8-py3.9
  tasks:
    - name: atlas-data-lake-tests
  display_name: Atlas Data Lake RHEL8 py3.9
  run_on:
    - rhel87-small
  expansions:
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: atlas-data-lake-rhel8-py3.13-no-c
  tasks:
    - name: atlas-data-lake-tests
  display_name: Atlas Data Lake RHEL8 py3.13 No C
  run_on:
    - rhel87-small
  expansions:
    NO_EXT: "1"
    PYTHON_BINARY: /opt/python/3.13/bin/python3
- name: atlas-data-lake-rhel8-py3.13
  tasks:
    - name: atlas-data-lake-tests
  display_name: Atlas Data Lake RHEL8 py3.13
  run_on:
    - rhel87-small
  expansions:
    PYTHON_BINARY: /opt/python/3.13/bin/python3

# Mod_wsgi tests.
- name: mod_wsgi-ubuntu-22-py3.9
  tasks:
    - name: mod-wsgi-standalone
    - name: mod-wsgi-replica-set
    - name: mod-wsgi-embedded-mode-standalone
    - name: mod-wsgi-embedded-mode-replica-set
  display_name: mod_wsgi Ubuntu-22 py3.9
  run_on:
    - ubuntu2204-small
  expansions:
    MOD_WSGI_VERSION: "4"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: mod_wsgi-ubuntu-22-py3.13
  tasks:
    - name: mod-wsgi-standalone
    - name: mod-wsgi-replica-set
    - name: mod-wsgi-embedded-mode-standalone
    - name: mod-wsgi-embedded-mode-replica-set
  display_name: mod_wsgi Ubuntu-22 py3.13
  run_on:
    - ubuntu2204-small
  expansions:
    MOD_WSGI_VERSION: "4"
    PYTHON_BINARY: /opt/python/3.13/bin/python3

# Disable test commands variants.
- name: disable-test-commands-rhel8-py3.9
  tasks:
    - name: .latest
  display_name: Disable test commands RHEL8 py3.9
  run_on:
    - rhel87-small
  expansions:
    AUTH: auth
    SSL: ssl
    DISABLE_TEST_COMMANDS: "1"
    PYTHON_BINARY: /opt/python/3.9/bin/python3

# Serverless variants.
- name: serverless-rhel8-py3.9
  tasks:
    - name: serverless_task_group
  display_name: Serverless RHEL8 py3.9
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    test_serverless: "true"
    AUTH: auth
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: serverless-rhel8-py3.13
  tasks:
    - name: serverless_task_group
  display_name: Serverless RHEL8 py3.13
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    test_serverless: "true"
    AUTH: auth
    SSL: ssl
    PYTHON_BINARY: /opt/python/3.13/bin/python3

- matrix_name: "tests-fips"
  matrix_spec:
    platform:
      - rhel9-fips
    auth: "auth"
    ssl: "ssl"
  display_name: "${platform} ${auth} ${ssl}"
  tasks:
    - "test-fips-standalone"

# Test one server version with zSeries, POWER8, and ARM.
- matrix_name: "test-different-cpu-architectures"
  matrix_spec:
    platform:
      - rhel8-zseries  # Added in 5.0.8 (SERVER-44074)
      - rhel8-power8 # Added in 4.2.7 (SERVER-44072)
      - rhel8-arm64 # Added in 4.4.2 (SERVER-48282)
    auth-ssl: "*"
  display_name: "${platform} ${auth-ssl}"
  tasks:
    - ".6.0"

- matrix_name: "tests-python-version-supports-openssl-102-test-ssl"
  matrix_spec:
    platform: rhel7
    # Python 3.10+ requires OpenSSL 1.1.1+
    python-version: ["3.9"]
    auth-ssl: "*"
  display_name: "OpenSSL 1.0.2 ${python-version} ${platform} ${auth-ssl}"
  tasks:
     - ".5.0"

- matrix_name: "test-search-index-helpers"
  matrix_spec:
    platform: rhel8
    python-version: "3.9"
  display_name: "Search Index Helpers ${platform}"
  tasks:
     - name: "test_atlas_task_group_search_indexes"

- matrix_name: "mockupdb-tests"
  matrix_spec:
    platform: rhel8
    python-version: 3.9
  display_name: "MockupDB Tests"
  tasks:
     - name: "mockupdb"

- matrix_name: "tests-doctests"
  matrix_spec:
    platform: rhel8
    python-version: ["3.9"]
  display_name: "Doctests ${python-version} ${platform}"
  tasks:
     - name: "doctests"

- name: "no-server"
  display_name: "No server test"
  run_on:
    - rhel84-small
  tasks:
    - name: "no-server"

- name: "Coverage Report"
  display_name: "Coverage Report"
  run_on:
    - rhel84-small
  tasks:
     - name: "coverage-report"

- matrix_name: "atlas-connect"
  matrix_spec:
    platform: rhel8
    python-version: "*"
  display_name: "Atlas connect ${python-version} ${platform}"
  tasks:
    - name: "atlas-connect"

# OCSP test matrix.
- name: ocsp-test-rhel8-v4.4-py3.9
  tasks:
    - name: .ocsp
  display_name: OCSP test RHEL8 v4.4 py3.9
  run_on:
    - rhel87-small
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: "4.4"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: ocsp-test-rhel8-v5.0-py3.10
  tasks:
    - name: .ocsp
  display_name: OCSP test RHEL8 v5.0 py3.10
  run_on:
    - rhel87-small
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: "5.0"
    PYTHON_BINARY: /opt/python/3.10/bin/python3
- name: ocsp-test-rhel8-v6.0-py3.11
  tasks:
    - name: .ocsp
  display_name: OCSP test RHEL8 v6.0 py3.11
  run_on:
    - rhel87-small
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: "6.0"
    PYTHON_BINARY: /opt/python/3.11/bin/python3
- name: ocsp-test-rhel8-v7.0-py3.12
  tasks:
    - name: .ocsp
  display_name: OCSP test RHEL8 v7.0 py3.12
  run_on:
    - rhel87-small
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: "7.0"
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: ocsp-test-rhel8-v8.0-py3.13
  tasks:
    - name: .ocsp
  display_name: OCSP test RHEL8 v8.0 py3.13
  run_on:
    - rhel87-small
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: "8.0"
    PYTHON_BINARY: /opt/python/3.13/bin/python3
- name: ocsp-test-rhel8-rapid-pypy3.9
  tasks:
    - name: .ocsp
  display_name: OCSP test RHEL8 rapid pypy3.9
  run_on:
    - rhel87-small
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: rapid
    PYTHON_BINARY: /opt/python/pypy3.9/bin/python3
- name: ocsp-test-rhel8-latest-pypy3.10
  tasks:
    - name: .ocsp
  display_name: OCSP test RHEL8 latest pypy3.10
  run_on:
    - rhel87-small
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: latest
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
- name: ocsp-test-win64-v4.4-py3.9
  tasks:
    - name: .ocsp-rsa !.ocsp-staple
  display_name: OCSP test Win64 v4.4 py3.9
  run_on:
    - windows-64-vsMulti-small
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: "4.4"
    PYTHON_BINARY: C:/python/Python39/python.exe
- name: ocsp-test-win64-v8.0-py3.13
  tasks:
    - name: .ocsp-rsa !.ocsp-staple
  display_name: OCSP test Win64 v8.0 py3.13
  run_on:
    - windows-64-vsMulti-small
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: "8.0"
    PYTHON_BINARY: C:/python/Python313/python.exe
- name: ocsp-test-macos-v4.4-py3.9
  tasks:
    - name: .ocsp-rsa !.ocsp-staple
  display_name: OCSP test macOS v4.4 py3.9
  run_on:
    - macos-14
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: "4.4"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.9/bin/python3
- name: ocsp-test-macos-v8.0-py3.13
  tasks:
    - name: .ocsp-rsa !.ocsp-staple
  display_name: OCSP test macOS v8.0 py3.13
  run_on:
    - macos-14
  batchtime: 20160
  expansions:
    AUTH: noauth
    SSL: ssl
    TOPOLOGY: server
    VERSION: "8.0"
    PYTHON_BINARY: /Library/Frameworks/Python.Framework/Versions/3.13/bin/python3

# Load balancer tests
- name: load-balancer-rhel8-v6.0-py3.9-auth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 v6.0 py3.9 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: "6.0"
    AUTH: auth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: load-balancer-rhel8-v6.0-py3.10-noauth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 v6.0 py3.10 NoAuth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: "6.0"
    AUTH: noauth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.10/bin/python3
- name: load-balancer-rhel8-v6.0-py3.11-noauth-nossl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 v6.0 py3.11 NoAuth NoSSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: "6.0"
    AUTH: noauth
    SSL: nossl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.11/bin/python3
- name: load-balancer-rhel8-v7.0-py3.12-auth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 v7.0 py3.12 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: "7.0"
    AUTH: auth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: load-balancer-rhel8-v7.0-py3.13-noauth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 v7.0 py3.13 NoAuth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: "7.0"
    AUTH: noauth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.13/bin/python3
- name: load-balancer-rhel8-v7.0-pypy3.9-noauth-nossl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 v7.0 pypy3.9 NoAuth NoSSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: "7.0"
    AUTH: noauth
    SSL: nossl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/pypy3.9/bin/python3
- name: load-balancer-rhel8-v8.0-pypy3.10-auth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 v8.0 pypy3.10 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: "8.0"
    AUTH: auth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
- name: load-balancer-rhel8-v8.0-py3.9-noauth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 v8.0 py3.9 NoAuth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: "8.0"
    AUTH: noauth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.9/bin/python3
- name: load-balancer-rhel8-v8.0-py3.10-noauth-nossl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 v8.0 py3.10 NoAuth NoSSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: "8.0"
    AUTH: noauth
    SSL: nossl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.10/bin/python3
- name: load-balancer-rhel8-latest-py3.11-auth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 latest py3.11 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: latest
    AUTH: auth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.11/bin/python3
- name: load-balancer-rhel8-latest-py3.12-noauth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 latest py3.12 NoAuth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: latest
    AUTH: noauth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.12/bin/python3
- name: load-balancer-rhel8-latest-py3.13-noauth-nossl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 latest py3.13 NoAuth NoSSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: latest
    AUTH: noauth
    SSL: nossl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.13/bin/python3
- name: load-balancer-rhel8-rapid-pypy3.9-auth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 rapid pypy3.9 Auth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: rapid
    AUTH: auth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/pypy3.9/bin/python3
- name: load-balancer-rhel8-rapid-pypy3.10-noauth-ssl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 rapid pypy3.10 NoAuth SSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: rapid
    AUTH: noauth
    SSL: ssl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/pypy3.10/bin/python3
- name: load-balancer-rhel8-rapid-py3.9-noauth-nossl
  tasks:
    - name: load-balancer-test
  display_name: Load Balancer RHEL8 rapid py3.9 NoAuth NoSSL
  run_on:
    - rhel87-small
  batchtime: 10080
  expansions:
    VERSION: rapid
    AUTH: noauth
    SSL: nossl
    test_loadbalancer: "true"
    PYTHON_BINARY: /opt/python/3.9/bin/python3

- matrix_name: "oidc-auth-test"
  matrix_spec:
    platform: [ rhel8, macos, windows ]
  display_name: "OIDC Auth ${platform}"
  tasks:
    - name: testoidc_task_group
      batchtime: 20160 # 14 days

- name: testazureoidc-variant
  display_name: "OIDC Auth Azure"
  run_on: ubuntu2204-small
  tasks:
    - name: testazureoidc_task_group
      batchtime: 20160 # Use a batchtime of 14 days as suggested by the CSFLE test README

- name: testgcpoidc-variant
  display_name: "OIDC Auth GCP"
  run_on: ubuntu2204-small
  tasks:
    - name: testgcpoidc_task_group
      batchtime: 20160 # Use a batchtime of 14 days as suggested by the CSFLE test README

- matrix_name: "aws-auth-test"
  matrix_spec:
    platform: [ubuntu-20.04]
    python-version: ["3.9"]
  display_name: "MONGODB-AWS Auth ${platform} ${python-version}"
  tasks:
    - name: "aws-auth-test-4.4"
    - name: "aws-auth-test-5.0"
    - name: "aws-auth-test-6.0"
    - name: "aws-auth-test-7.0"
    - name: "aws-auth-test-8.0"
    - name: "aws-auth-test-rapid"
    - name: "aws-auth-test-latest"

- matrix_name: "aws-auth-test-mac"
  matrix_spec:
    platform: [macos]
  display_name: "MONGODB-AWS Auth ${platform} ${python-version-mac}"
  tasks:
    - name: "aws-auth-test-4.4"
    - name: "aws-auth-test-5.0"
    - name: "aws-auth-test-6.0"
    - name: "aws-auth-test-7.0"
    - name: "aws-auth-test-8.0"
    - name: "aws-auth-test-rapid"
    - name: "aws-auth-test-latest"

- matrix_name: "aws-auth-test-windows"
  matrix_spec:
    platform: [windows]
    python-version-windows: "*"
  display_name: "MONGODB-AWS Auth ${platform} ${python-version-windows}"
  tasks:
    - name: "aws-auth-test-4.4"
    - name: "aws-auth-test-5.0"
    - name: "aws-auth-test-6.0"
    - name: "aws-auth-test-7.0"
    - name: "aws-auth-test-8.0"
    - name: "aws-auth-test-rapid"
    - name: "aws-auth-test-latest"

- name: testgcpkms-variant
  display_name: "GCP KMS"
  run_on:
    - debian11-small
  tasks:
    - name: testgcpkms_task_group
      batchtime: 20160 # Use a batchtime of 14 days as suggested by the CSFLE test README
    - testgcpkms-fail-task

- name: testazurekms-variant
  display_name: "Azure KMS"
  run_on: debian11-small
  tasks:
    - name: testazurekms_task_group
      batchtime: 20160 # Use a batchtime of 14 days as suggested by the CSFLE test README
    - testazurekms-fail-task

- name: rhel8-test-lambda
  display_name: AWS Lambda handler tests
  run_on: rhel87-small
  tasks:
    - name: test_aws_lambda_task_group

- name: rhel8-pr-assign-reviewer
  display_name: Assign PR Reviewer
  run_on: rhel87-small
  tasks:
    - name: "assign-pr-reviewer"

- name: rhel8-import-time
  display_name: Import Time Check
  run_on: rhel87-small
  tasks:
    - name: "check-import-time"

- name: backport-pr
  display_name: "Backport PR"
  run_on:
    - rhel8.7-small
  tasks:
    - name: "backport-pr"

- name: "perf-tests"
  display_name: "Performance Benchmark Tests"
  batchtime: 10080  # 7 days
  run_on: rhel90-dbx-perf-large
  tasks:
     - name: "perf-6.0-standalone"
     - name: "perf-6.0-standalone-ssl"
     - name: "perf-8.0-standalone"

      # Platform notes
      # i386 builds of OpenSSL or Cyrus SASL are not available
      # Debian 8.1 only supports MongoDB 3.4+
      # SUSE12 s390x is only supported by MongoDB 3.4+
      # No enterprise build for Archlinux, SSL not available
      # RHEL 7.6 and RHEL 8.4 only supports 3.6+.
      # RHEL 7 only supports 2.6+
      # RHEL 7.1 ppc64le is only supported by MongoDB 3.2+
      # RHEL 7.2 s390x is only supported by MongoDB 3.4+
      # Solaris MongoDB SSL builds are not available
      # Darwin MongoDB SSL builds are not available for 2.6
      # SUSE12 x86_64 is only supported by MongoDB 3.2+
      # vim: set et sw=2 ts=2 :
