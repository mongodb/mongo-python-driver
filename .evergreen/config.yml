########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourselves against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 3600 # 60 minutes is the longest we'll ever run (primarily
                        # for macos hosts)

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: subprocess.exec
    params:
      binary: ls -la

include:
  - filename: .evergreen/generated_configs/functions.yml
  - filename: .evergreen/generated_configs/tasks.yml
  - filename: .evergreen/generated_configs/variants.yml

functions:
  "fetch source":
    # Executes clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the subitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch

  "setup system":
    # Make an evergreen expansion file with dynamic values
    - command: subprocess.exec
      params:
        include_expansions_in_env: ["is_patch", "project", "version_id"]
        binary: bash
        working_dir: "src"
        args:
          - .evergreen/scripts/setup-system.sh
    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "upload test results":
    - command: attach.results
      params:
        file_location: "${DRIVERS_TOOLS}/results.json"
    - command: attach.xunit_results
      params:
        file: "src/xunit-results/TEST-*.xml"

  "run server":
    - command: subprocess.exec
      params:
        binary: bash
        working_dir: "src"
        include_expansions_in_env: [VERSION, TOPOLOGY, AUTH, SSL, ORCHESTRATION_FILE, PYTHON_BINARY, PYTHON_VERSION,
          STORAGE_ENGINE, REQUIRE_API_VERSION, DRIVERS_TOOLS, TEST_CRYPT_SHARED, AUTH_AWS, LOAD_BALANCER, LOCAL_ATLAS]
        args: [.evergreen/just.sh, run-server, "${TEST_NAME}"]
    - command: expansions.update
      params:
        file: ${DRIVERS_TOOLS}/mo-expansion.yml

  "run just script":
    - command: subprocess.exec
      type: test
      params:
       include_expansions_in_env: [AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN]
       binary: bash
       working_dir: "src"
       args: [.evergreen/just.sh, "${JUSTFILE_TARGET}"]

  "run tests":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env: [AUTH, SSL, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY,
          AWS_SESSION_TOKEN, COVERAGE, PYTHON_BINARY, LIBMONGOCRYPT_URL, MONGODB_URI, PYTHON_VERSION,
          DISABLE_TEST_COMMANDS, GREEN_FRAMEWORK, NO_EXT, COMPRESSORS, MONGODB_API_VERSION, DEBUG_LOG,
          ORCHESTRATION_FILE, OCSP_SERVER_TYPE, VERSION]
        binary: bash
        working_dir: "src"
        args: [.evergreen/just.sh, setup-tests, "${TEST_NAME}", "${SUB_TEST_NAME}"]
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        binary: bash
        args: [.evergreen/just.sh, run-tests]

  "cleanup":
    - command: subprocess.exec
      params:
        binary: bash
        working_dir: "src"
        args:
          - .evergreen/scripts/cleanup.sh

  "teardown system":
    - command: subprocess.exec
      params:
          binary: bash
          working_dir: "src"
          args: [.evergreen/just.sh, teardown-tests]
    - command: subprocess.exec
      params:
        binary: bash
        working_dir: "src"
        args:
          - ${DRIVERS_TOOLS}/.evergreen/teardown.sh

  "assume ec2 role":
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}
        duration_seconds: 3600

  "attach benchmark test results":
    - command: attach.results
      params:
        file_location: src/report.json

  "send dashboard data":
    - command: perf.send
      params:
        file: src/results.json

pre:
  - func: "fetch source"
  - func: "setup system"
  - func: "assume ec2 role"

post:
  # Disabled, causing timeouts
  # - func: "upload working dir"
  - func: "teardown system"
  - func: "upload coverage"
  - func: "upload mo artifacts"
  - func: "upload test results"
  - func: "cleanup"
