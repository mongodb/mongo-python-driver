from typing import Any, Dict, List, Mapping, Optional, Sequence, Tuple, Union

from bson import CodecOptions
from pymongo.collection import Collection
from pymongo.database import Database
from pymongo.monitoring import _EventListeners
from pymongo.pool import SocketInfo
from pymongo.read_preferences import _ServerMode


_UUNDER: str = ...
_UNICODE_REPLACE_CODEC_OPTIONS: CodecOptions = ...
def _gen_index_name(keys: Sequence[Tuple[Any, Any]]) -> str: ...
def _index_list(key_or_list: Union[str, Sequence[Tuple[str, Union[int, str]]]], direction: Optional[Union[int, str]] = ...) -> List[Tuple[str, Union[int, str]]]: ...
def _index_document(index_list: Sequence[Tuple[str, Union[int, str]]]) -> Mapping[str, Any]: ...
def _unpack_response(response: bytes, cursor_id: Optional[int] = ..., codec_options: CodecOptions = ...) -> Dict[str, Any]: ...
def _check_command_response(response: bytes, msg: Optional[str] = ..., allowable_errors: Optional[Sequence[str]] = ..., parse_write_concern_error: bool = ...) -> None: ...
def _check_gle_response(response: bytes) -> Dict[str, Any]: ...
def _first_batch(sock_info: SocketInfo, db: Database, coll: Collection, query: Mapping[str, Any], ntoreturn: int, slave_ok: bool, codec_options: CodecOptions, read_preference: _ServerMode, cmd: Mapping[str, Any], listeners: _EventListeners) -> Dict[str, Any]: ...
def _check_write_command_response(results: Mapping[str, Any]) -> None: ...
def _fields_list_to_dict(fields: Sequence[str], option_name: str) -> Dict[str, int]: ...
