from typing import Any, Callable, Dict, List, Mapping, Optional, Sequence, Union

from bson import CodecOptions, DBRef
from pymongo import MongoClient, common
from pymongo.collection import Collection
from pymongo.command_cursor import CommandCursor
from pymongo.pool import SocketInfo
from pymongo.read_concern import ReadConcern
from pymongo.read_preferences import _ServerMode
from pymongo.son_manipulator import SONManipulator
from pymongo.write_concern import WriteConcern


def _check_name(name: str) -> None: ...

class Database(common.BaseObject):
    def __init__(self, client: MongoClient, name: str, codec_options: Optional[CodecOptions] = ..., read_preference: Optional[_ServerMode] = ..., write_concern: Optional[WriteConcern] = ..., read_concern: Optional[ReadConcern] = ...) -> None: ...
    def add_son_manipulator(self, manipulator: SONManipulator): ...
    @property
    def system_js(self) -> SystemJS: ...
    @property
    def client(self) -> MongoClient: ...
    @property
    def name(self) -> str: ...
    @property
    def incoming_manipulators(self) -> List[str]: ...
    @property
    def incoming_copying_manipulators(self) -> List[str]: ...
    @property
    def outgoing_manipulators(self) -> List[str]: ...
    @property
    def outgoing_copying_manipulators(self) -> List[str]: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, name: str) -> Collection: ...
    def __getitem__(self, name: str) -> Collection: ...
    def get_collection(self, name: str, codec_options: Optional[CodecOptions] = ..., read_preference: Optional[_ServerMode] = ..., write_concern: Optional[WriteConcern] = ..., read_concern: Optional[ReadConcern] = ...) -> Collection: ...
    def _collection_default_options(self, name: str, **kargs: Any) -> Collection: ...
    def create_collection(self, name: str, codec_options: Optional[CodecOptions] = ..., read_preference: Optional[_ServerMode] = ..., write_concern: Optional[WriteConcern] = ..., read_concern: Optional[ReadConcern] = ..., **kwargs: Any) -> Collection: ...
    def _apply_incoming_manipulators(self, son: Mapping[str, Any], collection: Collection) -> Mapping[str, Any]: ...
    def _apply_incoming_copying_manipulators(self, son: Mapping[str, Any], collection: Collection) -> Mapping[str, Any]: ...
    def _fix_incoming(self, son: Mapping[str, Any], collection: Collection) -> Mapping[str, Any]: ...
    def _fix_outgoing(self, son: Mapping[str, Any], collection: Collection) -> Mapping[str, Any]: ...
    def _command(self, sock_info: SocketInfo, command: Union[str, Mapping[str, Any]], slave_ok: bool = ..., value: int = ..., check: bool = ..., allowable_errors: Optional[Sequence[str]] = ..., read_preference: _ServerMode = ..., codec_options: CodecOptions = ..., write_concern: Optional[WriteConcern] = ..., parse_write_concern_error: bool = ..., **kwargs: Any) -> Any: ...
    def command(self, command: Union[str, Mapping[str, Any]], value: int = ..., check: bool = ..., allowable_errors: Optional[Sequence[str]] = ..., read_preference: _ServerMode = ..., codec_options: CodecOptions = ..., **kwargs: Any) -> Any: ...
    def _list_collections(self, sock_info: SocketInfo, slave_okay: bool, criteria: Mapping[str, Any] = ...) -> CommandCursor: ...
    def collection_names(self, include_system_collections: bool = ...) -> List[str]: ...
    def drop_collection(self, name_or_collection: Union[str, Collection]) -> Dict[str, Any]: ...
    def validate_collection(self, name_or_collection: Union[str, Collection], scandata: bool = ..., full: bool = ...) -> Dict[str, Any]: ...
    def current_op(self, include_all: bool = ...) -> Dict[str, Any]: ...
    def profiling_level(self) -> int: ...
    def set_profiling_level(self, level: int, slow_ms: Optional[int] = ...) -> None: ...
    def profiling_info(self) -> List[Any]: ...
    def error(self) -> Any: ...
    def last_status(self) -> Any: ...
    def previous_error(self) -> Any: ...
    def reset_error_history(self) -> None: ...
    def __iter__(self) -> 'Database': ...
    def __next__(self) -> None: ...
    def _default_role(self, read_only: bool) -> str: ...
    def _create_or_update_user(self, create: bool, name: str, password: str, read_only: bool, **kwargs: Any) -> None: ...
    def _legacy_add_user(self, name: str, password: str, read_only: bool, **kwargs: Any) -> None: ...
    def add_user(self, name: str, password: Optional[str] = ..., read_only: Optional[bool] = ..., **kwargs: Any) -> None: ...
    def remove_user(self, name: str) -> None: ...
    def authenticate(self, name: Optional[str] = ..., password: Optional[str] = ..., source: Optional[str] = ..., mechanism: str = ..., **kwargs: Any) -> bool: ...
    def logout(self) -> None: ...
    def dereference(self, dbref: DBRef, **kwargs: Any) -> Dict[str, Any]: ...
    def eval(self, code: str, *args: Any) -> Any: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class SystemJS(object):
    def __init__(self, database: Database) -> None: ...
    def __setattr__(self, name: str, code: str) -> None: ...
    def __setitem__(self, name: str, code: str) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def __delitem__(self, name: str) -> None: ...
    def __getattr__(self, name: str) -> Callable[..., Any]: ...
    def __getitem__(self, name: str) -> Callable[..., Any]: ...
    def list(self) -> List[str]: ...
