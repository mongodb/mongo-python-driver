from typing import (Any, Dict, Mapping, NamedTuple, Optional, Set, Sequence,
                    Tuple, Union)
import datetime

from pymongo.ismaster import IsMaster
from pymongo.server_description import ServerDescription


_Listeners = NamedTuple('_Listeners', [
    ('command_listeners', Sequence[CommandListener]),
    ('server_listeners', Sequence[ServerListener]),
    ('server_heartbeat_listeners', Sequence[ServerHeartbeatListener]),
    ('topology_listeners', Sequence[TopologyListener]),
])

class _EventListener(object): ...

class CommandListener(_EventListener):
    def started(self, event: CommandStartedEvent) -> None: ...
    def succeeded(self, event: CommandSucceededEvent) -> None: ...
    def failed(self, event: CommandFailedEvent) -> None: ...

class ServerHeartbeatListener(_EventListener):
    def started(self, event: ServerHeartbeatStartedEvent) -> None: ...
    def succeeded(self, event: ServerHeartbeatSucceededEvent) -> None: ...
    def failed(self, event: ServerHeartbeatFailedEvent) -> None: ...

class TopologyListener(_EventListener):
    def opened(self, event: _ServerEvent) -> None: ...
    def description_changed(self, event: _ServerEvent) -> None: ...
    def closed(self, event: _ServerEvent) -> None: ...

class ServerListener(_EventListener):
    def opened(self, event: _ServerEvent) -> None: ...
    def description_changed(self, event: _ServerEvent) -> None: ...
    def closed(self, event: _ServerEvent) -> None: ...

def register(listener: _EventListener) -> None: ...

class _CommandEvent(object):
    def __init__(self, command_name: str, request_id: int, connection_id: Tuple[str, int], operation_id: int) -> None: ...
    @property
    def command_name(self) -> str: ...
    @property
    def request_id(self) -> int: ...
    @property
    def connection_id(self) -> Tuple[str, int]: ...
    @property
    def operation_id(self) -> int: ...

class CommandStartedEvent(_CommandEvent):
    def __init__(self, command: Mapping[str, Any], database_name: str, *args: Any) -> None: ...
    @property
    def command(self) -> Dict[str, Any]: ...
    @property
    def database_name(self) -> str: ...

class CommandSucceededEvent(_CommandEvent):
    def __init__(
        self,
        duration: datetime.timedelta,
        reply: Mapping[str, Any],
        command_name: str,
        request_id: int,
        connection_id: Tuple[str, int],
        operation_id: int) -> None: ...
    @property
    def duration_micros(self) -> int: ...
    @property
    def reply(self) -> Dict[str, Any]: ...

class CommandFailedEvent(_CommandEvent):
    def __init__(self, duration: datetime.timedelta, failure: Mapping[str, Any], *args: Any) -> None: ...
    @property
    def duration_micros(self) -> int: ...
    @property
    def failure(self) -> Dict[str, Any]: ...

class _ServerEvent(object):
    def __init__(self, server_address: Tuple[str, int], topology_id: int) -> None: ...
    @property
    def server_address(self) -> Tuple[str, int]: ...
    @property
    def topology_id(self) -> int: ...

class ServerDescriptionChangedEvent(_ServerEvent):
    def __init__(self, previous_description: ServerDescription, new_description: ServerDescription, *args: Any) -> None: ...
    @property
    def previous_description(self) -> ServerDescription: ...
    @property
    def new_description(self) -> ServerDescription: ...

class ServerOpeningEvent(_ServerEvent): ...

class ServerClosedEvent(_ServerEvent): ...

class TopologyEvent(object):
    def __init__(self, topology_id: int) -> None: ...
    @property
    def topology_id(self) -> int: ...

class TopologyDescriptionChangedEvent(TopologyEvent):
    def __init__(self, previous_description: ServerDescription,
                 new_description: ServerDescription, *args: Any) -> None: ...
    @property
    def previous_description(self) -> ServerDescription: ...
    @property
    def new_description(self) -> ServerDescription: ...

class TopologyOpenedEvent(TopologyEvent): ...

class TopologyClosedEvent(TopologyEvent): ...

class _ServerHeartbeatEvent(object):
    def __init__(self, connection_id: Tuple[str, int]) -> None: ...
    @property
    def connection_id(self) -> Tuple[str, int]: ...

class ServerHeartbeatStartedEvent(_ServerHeartbeatEvent): ...

class ServerHeartbeatSucceededEvent(_ServerHeartbeatEvent):
    def __init__(self, duration: int, reply: IsMaster, *args: Any) -> None: ...
    @property
    def duration(self) -> int: ...
    @property
    def reply(self) -> IsMaster: ...

class ServerHeartbeatFailedEvent(_ServerHeartbeatEvent):
    def __init__(self, duration: int, reply: Exception, *args: Any) -> None: ...
    @property
    def duration(self) -> int: ...
    @property
    def reply(self) -> Exception: ...

class _EventListeners(object):
    def __init__(self, listeners: Sequence[_EventListener]) -> None: ...
    @property
    def enabled_for_commands(self) -> bool: ...
    @property
    def enabled_for_server(self) -> bool: ...
    @property
    def enabled_for_server_heartbeat(self) -> bool: ...
    @property
    def enabled_for_topology(self) -> bool: ...
    def event_listeners(self) -> Tuple[Sequence[Any]]: ...
    def publish_command_start(
        self,
        command: Mapping[str, Any],
        database_name: str,
        request_id: int,
        connection_id: Tuple[str, int],
        op_id: Optional[int] = ...) -> None: ...
    def publish_command_success(
        self,
        duration: datetime.timedelta,
        reply: Mapping[str, Any],
        command_name: str,
        request_id: int,
        connection_id: Tuple[str, int],
        op_id: Optional[int] = ...) -> None: ...
    def publish_command_failure(
        self,
        duration: datetime.timedelta,
        failure: Mapping[str, Any],
        command_name: str,
        request_id: int,
        connection_id: Tuple[str, int],
        op_id: Optional[int] = ...) -> None: ...
    def publish_server_heartbeat_started(self, connection_id: Tuple[str, int]) -> None: ...
    def publish_server_heartbeat_succeeded(
        self,
        connection_id: Tuple[str, int],
        duration: int,
        reply: Union[Mapping[str, Any], Exception]) -> None: ...
    def publish_server_heartbeat_failed(
        self,
        connection_id: Tuple[str, int],
        duration: int,
        reply: Union[Mapping[str, Any], Exception]) -> None: ...
    def publish_server_opened(self, server_address: Tuple[str, int], topology_id: int) -> None: ...
    def publish_server_closed(self, server_address: Tuple[str, int], topology_id: int) -> None: ...
    def publish_server_description_changed(
        self,
        previous_description: ServerDescription,
        new_description: ServerDescription,
        server_address: Tuple[str, int],
        topology_id: int) -> None: ...
    def publish_topology_opened(self, topology_id: int) -> None: ...
    def publish_topology_closed(self, topology_id: int) -> None: ...
    def publish_topology_description_changed(
        self,
        previous_description: ServerDescription,
        new_description: ServerDescription,
        topology_id: int) -> None: ...
