from typing import Any, Mapping, Sequence

from pymongo.server_description import ServerDescription
from pymongo.topology_description import TopologyDescription


class Selection(object):
    @classmethod
    def from_topology_description(cls: type, topology_description: TopologyDescription) -> 'Selection': ...
    def __init__(
        self,
        topology_description: TopologyDescription,
        server_descriptions: Sequence[ServerDescription],
        common_wire_version: int,
        primary: ServerDescription) -> None: ...
    def with_server_descriptions(self, server_descriptions: Sequence[ServerDescription]) -> 'Selection': ...
    def secondary_with_max_last_write_date(self) -> ServerDescription: ...
    @property
    def primary_selection(self) -> 'Selection': ...
    @property
    def heartbeat_frequency(self) -> int: ...
    @property
    def topology_type(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __getitem__(self, item: int) -> ServerDescription: ...

def any_server_selector(selection: Selection) -> Selection: ...
def readable_server_selector(selection: Selection) -> Selection: ...
def writable_server_selector(selection: Selection) -> Selection: ...
def secondary_server_selector(selection: Selection) -> Selection: ...
def arbiter_server_selector(selection: Selection) -> Selection: ...
def writable_preferred_server_selector(selection: Selection) -> Selection: ...
def apply_single_tag_set(tag_set: Mapping[str, Any], selection: Selection) -> Selection: ...
def apply_tag_sets(tag_sets: Sequence[Mapping[str, Any]], selection: Selection) -> Selection: ...
def secondary_with_tags_server_selector(tag_sets: Sequence[Mapping[str, Any]], selection: Selection) -> Selection: ...
def member_with_tags_server_selector(tag_sets: Sequence[Mapping[str, Any]], selection: Selection) -> Selection: ...
