from typing import Any, Callable, List, Optional, Sequence, Set, Tuple, Union
import sys
if sys.version_info >= (3,):
    from queue import Queue
else:
    from Queue import Queue

from pymongo.pool import Pool
from pymongo.server import Server
from pymongo.server_description import ServerDescription
from pymongo.server_selectors import Selection
from pymongo.settings import TopologySettings
from pymongo.topology_description import TopologyDescription, TOPOLOGY_TYPE as TOPOLOGY_TYPE


def process_events_queue(queue_ref: Queue[Tuple[Callable[..., Any], Sequence[Any]]]) -> bool: ...

class Topology(object):
    def __init__(self, topology_settings: TopologySettings) -> None: ...
    def open(self) -> None: ...
    def select_servers(
        self,
        selector: Callable[[Sequence[Server]], Sequence[Server]],
        server_selection_timeout: Optional[int] = ...,
        address: Optional[Tuple[str, int]] = ...) -> List[Server]: ...
    def select_server(
        self,
        selector: Callable[[Sequence[Server]], Sequence[Server]],
        server_selection_timeout: Optional[int] = ...,
        address: Optional[Tuple[str, int]] = ...) -> Server: ...
    def select_server_by_address(self, address: Tuple[str, int], server_selection_timeout: Optional[int] = ...) -> Server: ...
    def on_change(self, server_description: ServerDescription) -> None: ...
    def get_server_by_address(self, address: Tuple[str, int]) -> Optional[Server]: ...
    def has_server(self, address: Tuple[str, int]) -> bool: ...
    def get_primary(self) -> Optional[Tuple[str, int]]: ...
    def get_secondaries(self) -> Set[Tuple[str, int]]: ...
    def get_arbiters(self) -> Set[Tuple[str, int]]: ...
    def request_check_all(self, wait_time: int = ...) -> None: ...
    def reset_pool(self, address: Tuple[str, int]) -> None: ...
    def reset_server(self, address: Tuple[str, int]) -> None: ...
    def reset_server_and_request_check(self, address: Tuple[str, int]) -> None: ...
    def update_pool(self) -> None: ...
    def close(self) -> None: ...
    @property
    def description(self) -> TopologyDescription: ...
