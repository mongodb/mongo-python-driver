from bson.errors import InvalidDocument

from typing import Any, Dict, Mapping, Optional

class PyMongoError(Exception): ...
class ProtocolError(PyMongoError): ...
class ConnectionFailure(PyMongoError): ...
class AutoReconnect(ConnectionFailure):
    def __init__(self, message: str = '', errors: Any = None) -> None: ...
class NetworkTimeout(AutoReconnect): ...
class NotMasterError(AutoReconnect): ...
class ServerSelectionTimeoutError(AutoReconnect): ...
class ConfigurationError(PyMongoError): ...
class OperationFailure(PyMongoError):
    def __init__(self, error: str, code: Optional[int] = None, details: Optional[Mapping[str, Any]] = None) -> None: ...
    @property
    def code(self) -> int: ...
    @property
    def details(self) -> Dict[str, Any]: ...
class CursorNotFound(OperationFailure): ...
class ExecutionTimeout(OperationFailure): ...
class WriteConcernError(OperationFailure): ...
class WriteError(OperationFailure): ...
class WTimeoutError(WriteConcernError): ...
class DuplicateKeyError(WriteError): ...
class BulkWriteError(OperationFailure):
    def __init__(self, results: Mapping[str, Any]) -> None: ...
class InvalidOperation(PyMongoError): ...
class InvalidName(PyMongoError): ...
class CollectionInvalid(PyMongoError): ...
class InvalidURI(ConfigurationError): ...
class ExceededMaxWaiters(Exception): ...
class DocumentTooLarge(InvalidDocument): ...
