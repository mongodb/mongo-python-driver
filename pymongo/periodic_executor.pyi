import weakref
from typing import Any, Callable, Optional


class PeriodicExecutor(object):
    def __init__(self, interval: int, min_interval: int, target: Callable[..., Any], name: Optional[str] = None) -> None: ...
    def open(self) -> None: ...
    def close(self, dummy: Optional[Any] = None) -> None: ...
    def join(self, timeout: int = None) -> None: ...
    def wake(self) -> None: ...
    def __should_stop(self) -> bool: ...
    def _run(self) -> None: ...

def _register_executor(executor: PeriodicExecutor) -> None: ...
def _on_executor_deleted(ref: weakref.ref) -> None: ...
def _shutdown_executors() -> None: ...
