from typing import Any, Dict, Optional


class CollationStrength(object):
    PRIMARY: int = ...
    SECONDARY: int = ...
    TERTIARY: int = ...
    QUATERNARY: int = ...
    IDENTICAL: int = ...
class CollationAlternate(object):
    NON_IGNORABLE: str = ...
    SHIFTED: str = ...
class CollationMaxVariable(object):
    PUNCT: str = ...
    SPACE: str = ...
class CollationCaseFirst(object):
    UPPER: str = ...
    LOWER: str = ...
    OFF: str = ...
class Collation(object):
    def __init__(self, locale: str, caseLevel: Optional[bool] = ..., caseFirst: Optional[str] = ..., strength: Optional[int] = ..., numericOrdering: Optional[bool] = ..., alternate: Optional[str] = ..., maxVariable: Optional[str] = ..., normalization: Optional[bool] = ..., backwards: Optional[bool] = ..., **kwargs: Any) -> None: ...
    @property
    def document(self) -> Dict[str, Any]: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
def validate_collation_or_none(value: Any) -> Optional[Dict[str, Any]]: ...
