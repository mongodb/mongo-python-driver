import collections
import datetime
from typing import Any, Callable, Dict, FrozenSet, List, Mapping, MutableMapping, Optional, Tuple, Type, TypeVar, Union

from bson import CodecOptions
from bson.raw_bson import RawBSONDocument
from pymongo.read_concern import ReadConcern
from pymongo.read_preferences import _ServerMode
from pymongo.write_concern import WriteConcern

MAX_BSON_SIZE: int = ...
MAX_MESSAGE_SIZE: int = ...
MIN_WIRE_VERSION: int = ...
MAX_WIRE_VERSION: int = ...
MAX_WRITE_BATCH_SIZE: int = ...
MIN_SUPPORTED_WIRE_VERSION: int = ...
MAX_SUPPORTED_WIRE_VERSION: int = ...
HEARTBEAT_FREQUENCY: int = ...
KILL_CURSOR_FREQUENCY: int = ...
EVENTS_QUEUE_FREQUENCY: int = ...
SERVER_SELECTION_TIMEOUT: int = ...
MIN_HEARTBEAT_INTERVAL: float = ...
CONNECT_TIMEOUT: float = ...
MAX_POOL_SIZE: int = ...
MIN_POOL_SIZE: int = ...
MAX_IDLE_TIME_MS: Optional[int] = ...
LOCAL_THRESHOLD_MS: int = ...
COMMAND_NOT_FOUND_CODES: Tuple[int, int, None] = ...
UNAUTHORIZED_CODES: Tuple[int, int, int] = ...
_UUID_REPRESENTATIONS: Dict[str, int] = ...
_MECHANISM_PROPS: FrozenSet[str] = ...
_UNICODE_DECODE_ERROR_HANDLERS: FrozenSet[str] = ...
WRITE_CONCERN_OPTIONS: FrozenSet[str] = ...
def partition_node(node: str) -> Tuple[str, int]: ...
def clean_node(node: str) -> Tuple[str, int]: ...
def raise_config_error(key: str, dummy: Any) -> None: ...
def validate_boolean(option: str, value: Any) -> bool: ...
def validate_boolean_or_string(option: str, value: Any) -> bool: ...
def validate_integer(option: str, value: Any) -> int: ...
def validate_positive_integer(option: str, value: Any) -> int: ...
def validate_non_negative_integer(option: str, value: Any) -> int: ...
def validate_readable(option: str, value: Any) -> Optional[str]: ...
def validate_positive_integer_or_none(option: str, value: Any) -> Optional[int]: ...
def validate_non_negative_integer_or_none(option: str, value: Any) -> Optional[int]: ...
def validate_string(option: str, value: Any) -> str: ...
def validate_string_or_none(option: str, value: Any) -> Optional[str]: ...
def validate_int_or_basestring(option: str, value: Any) -> Union[int, str]: ...
def validate_positive_float(option: str, value: Any) -> float: ...
def validate_positive_float_or_zero(option: str, value: Any) -> float: ...
def validate_timeout_or_none(option: str, value: Any) -> Optional[float]: ...
def validate_timeout_or_zero(option: str, value: Any) -> float: ...
def validate_max_staleness(option: str, value: Any) -> int: ...
def validate_read_preference(dummy: Any, value: Any) -> _ServerMode: ...
def validate_read_preference_mode(dummy: Any, value: Any) -> _ServerMode: ...
def validate_auth_mechanism(option: str, value: Any) -> str: ...
def validate_uuid_representation(dummy: Any, value: Any) -> int: ...
def validate_read_preference_tags(name: str, value: Any) -> List[Dict[str, str]]: ...
def validate_auth_mechanism_properties(option: str, value: Any) -> Dict[str, Union[bool, str]]: ...
_DocumentClass = TypeVar('_DocumentClass', Type[RawBSONDocument[str, Any]], Type[MutableMapping[str, Any]])
def validate_document_class(option: str, value: _DocumentClass) -> _DocumentClass: ...
def validate_list(option: str, value: Any) -> List[Any]: ...
def validate_is_mapping(option: str, value: Any) -> Dict[Any, Any]: ...
def validate_is_document_type(option: str, value: Any) -> None: ...
def validate_appname_or_none(option: str, value: Any) -> Optional[str]: ...
def validate_ok_for_replace(replacement: Any) -> None: ...
def validate_ok_for_update(update: Any) -> None: ...
def validate_unicode_decode_error_handler(dummy: Any, value: str) -> str: ...
def validate_tzinfo(dummy: Any, value: Any) -> Optional[datetime.tzinfo]: ...
URI_VALIDATORS: Dict[str, Callable[..., Any]] = ...
TIMEOUT_VALIDATORS: Dict[str, Callable[..., Any]] = ...
KW_VALIDATORS: Dict[str, Callable[..., Any]] = ...
VALIDATORS: Dict[str, Callable[..., Any]] = ...
_AUTH_OPTIONS: FrozenSet[str] = ...
def validate_auth_option(option: str, value: Any) -> Tuple[str, Any]: ...
def validate(option: str, value: Any) -> Tuple[str, Any]: ...
def get_validated_options(options: Mapping[str, Any], warn: bool = ...) -> Dict[str, Any]: ...
class BaseObject(object):
    def __init__(
        self,
        codec_options: CodecOptions,
        read_preference: _ServerMode,
        write_concern: WriteConcern,
        read_concern: ReadConcern) -> None: ...
    @property
    def codec_options(self) -> CodecOptions: ...
    @property
    def write_concern(self) -> WriteConcern: ...
    @property
    def read_preference(self) -> _ServerMode: ...
    @property
    def read_concern(self) -> ReadConcern: ...
